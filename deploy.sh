#!/bin/bash

# =====================================================
# SCRIPT DE DEPLOY - DNX PLATAFORMAS CRM
# Deploy automatizado na VPS app.dnmarketing.com.br
# =====================================================

set -e  # Para o script se houver erro

echo "üöÄ Iniciando deploy DNX Plataformas CRM..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    log_error "package.json n√£o encontrado. Execute o script no diret√≥rio raiz do projeto."
    exit 1
fi

# 1. Verificar depend√™ncias
log_info "Verificando depend√™ncias..."

if ! command -v docker &> /dev/null; then
    log_error "Docker n√£o est√° instalado"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n√£o est√° instalado"
    exit 1
fi

# 2. Configurar vari√°veis de ambiente
log_info "Configurando vari√°veis de ambiente..."

if [ ! -f ".env.production" ]; then
    log_warn "Arquivo .env.production n√£o encontrado. Copiando de .env.example..."
    cp .env.example .env.production
    log_warn "‚ö†Ô∏è  Configure as vari√°veis no arquivo .env.production antes de continuar!"
    exit 1
fi

# 3. Executar lint e type checking
log_info "Executando lint e verifica√ß√£o de tipos..."
npm run lint
npm run type-check

# 4. Fazer backup da aplica√ß√£o atual (se existir)
log_info "Fazendo backup da vers√£o atual..."
if docker ps | grep -q "dnx-plataformas"; then
    log_info "Parando aplica√ß√£o atual..."
    docker-compose down
fi

# 5. Build da nova vers√£o
log_info "Fazendo build da aplica√ß√£o..."
npm run build

# 6. Build da imagem Docker
log_info "Construindo imagem Docker..."
docker-compose build --no-cache

# 7. Deploy da aplica√ß√£o
log_info "Fazendo deploy da aplica√ß√£o..."
docker-compose up -d

# 8. Aguardar aplica√ß√£o inicializar
log_info "Aguardando aplica√ß√£o inicializar..."
sleep 30

# 9. Verificar se a aplica√ß√£o est√° rodando
log_info "Verificando se a aplica√ß√£o est√° funcionando..."

if curl -f -s http://localhost:3000 > /dev/null; then
    log_info "‚úÖ Aplica√ß√£o est√° rodando localmente!"
else
    log_error "‚ùå Aplica√ß√£o n√£o est√° respondendo localmente"
    docker-compose logs
    exit 1
fi

# 10. Verificar logs
log_info "Verificando logs da aplica√ß√£o..."
docker-compose logs --tail=50

# 11. Limpar recursos n√£o utilizados
log_info "Limpando recursos Docker n√£o utilizados..."
docker system prune -f

log_info "üéâ Deploy conclu√≠do com sucesso!"
log_info "üì± Aplica√ß√£o dispon√≠vel em: https://app.dnmarketing.com.br"
log_info ""
log_info "Comandos √∫teis:"
log_info "  docker-compose logs -f           # Ver logs em tempo real"
log_info "  docker-compose down              # Parar aplica√ß√£o"
log_info "  docker-compose up -d             # Subir aplica√ß√£o"
log_info "  docker-compose restart           # Reiniciar aplica√ß√£o"