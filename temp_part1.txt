'use client'

import { useEffect, useState } from 'react'
import { createPortal } from 'react-dom'
import { supabase, Lead } from '../../lib/supabase'
import { useAuth } from '../../components/AuthWrapper'
import { Phone, User, Plus, DollarSign, FileText, AlertCircle, CheckCircle, Clock, Users, LayoutGrid, List, Search, Filter, X, BarChart3, TrendingUp, Calendar, FileBarChart, Target, Activity, MessageSquare, Edit3, Save, ChevronDown } from 'lucide-react'

const STATUS_CONFIG = {
  // Status Limpa Nome
  'novo_lead': { label: 'Novo Lead', color: 'bg-blue-100 text-blue-800', icon: Users },
  'qualificacao': { label: 'Qualificação', color: 'bg-yellow-100 text-yellow-800', icon: Clock },
  'desqualificado': { label: 'Desqualificado', color: 'bg-red-100 text-red-800', icon: AlertCircle },
  'pagamento_consulta': { label: 'Pagamento Consulta', color: 'bg-purple-100 text-purple-800', icon: DollarSign },
  'nao_consta_divida': { label: 'Não Consta Dívida', color: 'bg-green-100 text-green-800', icon: CheckCircle },
  'consta_divida': { label: 'Consta Dívida', color: 'bg-orange-100 text-orange-800', icon: FileText },
  'enviado_para_negociacao': { label: 'Em Negociação', color: 'bg-indigo-100 text-indigo-800', icon: User },
  'cliente_fechado': { label: 'Cliente Fechado', color: 'bg-green-100 text-green-800', icon: CheckCircle },

  // Status Previdenciário
  'novo_caso': { label: 'Novo Caso', color: 'bg-blue-100 text-blue-800', icon: Users },
  'analise_viabilidade': { label: 'Análise Viabilidade', color: 'bg-yellow-100 text-yellow-800', icon: Clock },
  'caso_viavel': { label: 'Caso Viável', color: 'bg-green-100 text-green-800', icon: CheckCircle },
  'caso_inviavel': { label: 'Caso Inviável', color: 'bg-red-100 text-red-800', icon: AlertCircle },
  'contrato_enviado': { label: 'Contrato Enviado', color: 'bg-purple-100 text-purple-800', icon: FileText },
  'contrato_assinado': { label: 'Contrato Assinado', color: 'bg-indigo-100 text-indigo-800', icon: DollarSign },
  'processo_iniciado': { label: 'Processo Iniciado', color: 'bg-orange-100 text-orange-800', icon: Activity },
  'caso_finalizado': { label: 'Caso Finalizado', color: 'bg-green-100 text-green-800', icon: CheckCircle },

  // Status B2B
  'novo_contato': { label: 'Novo Contato', color: 'bg-blue-100 text-blue-800', icon: Users },
  'qualificacao_inicial': { label: 'Qualificação Inicial', color: 'bg-yellow-100 text-yellow-800', icon: Clock },
  'mapeando_decisor': { label: 'Mapeando Decisor', color: 'bg-orange-100 text-orange-800', icon: User },
  'contato_decisor': { label: 'Contato Decisor', color: 'bg-purple-100 text-purple-800', icon: MessageSquare },
  'apresentacao_realizada': { label: 'Apresentação Realizada', color: 'bg-indigo-100 text-indigo-800', icon: Activity },
  'proposta_enviada': { label: 'Proposta Enviada', color: 'bg-teal-100 text-teal-800', icon: FileText },
  'negociacao': { label: 'Negociação', color: 'bg-amber-100 text-amber-800', icon: MessageSquare },
  'negocio_fechado': { label: 'Negócio Fechado', color: 'bg-green-100 text-green-800', icon: CheckCircle },
}

// Função para gerar config de status dinamicamente baseado no tipo de negócio
const generateStatusConfig = (status: string) => {
  // Se já existe no config estático, usar ele
  if (STATUS_CONFIG[status as keyof typeof STATUS_CONFIG]) {
    return STATUS_CONFIG[status as keyof typeof STATUS_CONFIG]
  }

  // Gerar config baseado na nomenclatura do status
  let label = status.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())
  let color = 'bg-gray-100 text-gray-800'
  let icon = FileText

  // Mapear cores e ícones baseados em palavras-chave
  if (status.includes('novo')) {
    color = 'bg-blue-100 text-blue-800'
    icon = Users
  } else if (status.includes('analise') || status.includes('qualific')) {
    color = 'bg-yellow-100 text-yellow-800'
    icon = Clock
  } else if (status.includes('viavel') || status.includes('divida') || status.includes('proposta')) {
    color = 'bg-orange-100 text-orange-800'
    icon = FileText
  } else if (status.includes('contrato') || status.includes('pagamento')) {
    color = 'bg-purple-100 text-purple-800'
    icon = DollarSign
  } else if (status.includes('negociacao') || status.includes('apresentacao')) {
    color = 'bg-indigo-100 text-indigo-800'
    icon = MessageSquare
  } else if (status.includes('finalizado') || status.includes('fechado') || status.includes('assinado')) {
    color = 'bg-green-100 text-green-800'
    icon = CheckCircle
  } else if (status.includes('inviavel') || status.includes('desqualificado') || status.includes('perdido')) {
    color = 'bg-red-100 text-red-800'
    icon = AlertCircle
  } else if (status.includes('processo') || status.includes('iniciado')) {
    color = 'bg-blue-100 text-blue-800'
    icon = Activity
  } else if (status.includes('agendada') || status.includes('agenda')) {
    color = 'bg-purple-100 text-purple-800'
    icon = Calendar
  }

  return { label, color, icon }
}

interface CreateLeadModalProps {
  isOpen: boolean
  onClose: () => void
  onLeadCreated: () => void
  userId?: string
}

function CreateLeadModal({ isOpen, onClose, onLeadCreated, userId }: CreateLeadModalProps) {
  const [formData, setFormData] = useState({
    nome_cliente: '',
    cpf: '',
    telefone: '',
    origem: 'WhatsApp',
    tipo_consulta_interesse: 'Consulta Rating',
    valor_estimado_divida: '',
    tempo_negativado: '',
    porte_empresa: 'pequena',
    segmento_empresa: 'tecnologia',
    nome_empresa: '',
    cnpj: '',
    falando_com_responsavel: false
  })
  const [loading, setLoading] = useState(false)
  const [userTipoNegocio, setUserTipoNegocio] = useState<any>(null)

  // Buscar tipo de negócio do usuário
  useEffect(() => {
    if (userId && isOpen) {
      fetchUserTipoNegocio()
    }
  }, [userId, isOpen])

  const fetchUserTipoNegocio = async () => {
    console.log('Modal: Buscando tipo de negócio para userId:', userId)
    try {
      const { data, error } = await supabase
        .from('user_tipos_negocio')
        .select(`
          tipo_negocio_id,
          tipos_negocio!inner (
            id,
            nome,
            descricao
          )
        `)
        .eq('user_id', userId)
        .single()

      console.log('Modal: Resultado da busca:', data, 'Error:', error)

      if (error) throw error
      setUserTipoNegocio(data?.tipos_negocio)

      // Ajustar valor inicial baseado no tipo de negócio
      const tipoNegocio = Array.isArray(data?.tipos_negocio) ? data?.tipos_negocio[0] : data?.tipos_negocio
      if (tipoNegocio?.nome === 'previdenciario') {
        console.log('Modal: Configurando para previdenciário')
        setFormData(prev => ({ ...prev, tipo_consulta_interesse: 'Análise de Viabilidade' }))
      } else {
        console.log('Modal: Configurando para limpa nome')
        setFormData(prev => ({ ...prev, tipo_consulta_interesse: 'Consulta Rating' }))
      }
    } catch (error) {
      console.error('Erro ao buscar tipo de negócio:', error)
      // Fallback baseado no usuário
      if (userId === '28') {
        console.log('Modal: Configurando usuário 28 como previdenciário (fallback)')
        setUserTipoNegocio({ id: 2, nome: 'previdenciario', descricao: 'Advogado Previdenciário' })
        setFormData(prev => ({ ...prev, tipo_consulta_interesse: 'Análise de Viabilidade' }))
      } else {
        setUserTipoNegocio({ nome: 'limpa_nome' })
        setFormData(prev => ({ ...prev, tipo_consulta_interesse: 'Consulta Rating' }))
      }
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!userId) return

    setLoading(true)
    try {
      // Determinar status inicial e tipo_negocio_id baseado no tipo
      let statusInicial = 'novo_lead'
      let tipoNegocioId = 1

      if (userTipoNegocio?.nome === 'previdenciario') {
        statusInicial = 'novo_caso'
        tipoNegocioId = 2
      } else if (userTipoNegocio?.nome === 'b2b') {
        statusInicial = 'novo_contato'
        tipoNegocioId = 3
      }

      // Estruturar dados personalizados baseado no tipo
      let dadosPersonalizados = {}

      if (userTipoNegocio?.nome === 'b2b') {
        dadosPersonalizados = {
          segmento_empresa: formData.segmento_empresa,
          porte_empresa: formData.porte_empresa,
          budget_disponivel: formData.valor_estimado_divida ? parseFloat(formData.valor_estimado_divida) : null,
          observacoes: formData.tempo_negativado || null
        }
      } else if (userTipoNegocio?.nome === 'previdenciario') {
        dadosPersonalizados = {
          tipo_servico: formData.tipo_consulta_interesse,
          valor_estimado_caso: formData.valor_estimado_divida ? parseFloat(formData.valor_estimado_divida) : null,
          situacao_atual: formData.tempo_negativado || null
        }
      } else {
        // Limpa nome
        dadosPersonalizados = {
          tipo_consulta_interesse: formData.tipo_consulta_interesse,
          valor_estimado_divida: formData.valor_estimado_divida ? parseFloat(formData.valor_estimado_divida) : null,
          tempo_negativado: formData.tempo_negativado || null
        }
      }

      const leadData = {
        user_id: parseInt(userId || '0'),
        nome_cliente: formData.nome_cliente,
        cpf_cnpj: userTipoNegocio?.nome === 'b2b' ? formData.cnpj : formData.cpf || null,
        telefone: formData.telefone,
        origem: formData.origem,
        status_generico: statusInicial,
        tipo_negocio_id: tipoNegocioId,
        dados_personalizados: dadosPersonalizados,
        nome_empresa: userTipoNegocio?.nome === 'b2b' ? formData.nome_empresa || null : null,
        falando_com_responsavel: userTipoNegocio?.nome === 'b2b' ? formData.falando_com_responsavel : null
      }

      const { error } = await supabase
        .from('leads')
        .insert([leadData])

      if (error) throw error

      // Se é B2B e falando com responsável, mover outros leads da mesma empresa para mapeando_decisor
      if (userTipoNegocio?.nome === 'b2b' && formData.falando_com_responsavel && formData.nome_empresa) {
        const { error: updateError } = await supabase
          .from('leads')
          .update({
            status_generico: 'mapeando_decisor',
            updated_at: new Date().toISOString()
          })
          .eq('nome_empresa', formData.nome_empresa)
          .eq('user_id', parseInt(userId || '0'))
          .neq('status_generico', 'novo_contato') // Não alterar o lead recém criado
          .neq('status_generico', 'negocio_fechado') // Não alterar leads já fechados
          .neq('status_generico', 'desqualificado') // Não alterar leads desqualificados

        if (updateError) {
          console.error('Erro ao atualizar leads da mesma empresa:', updateError)
        } else {
          console.log('Leads da empresa', formData.nome_empresa, 'movidos para mapeando_decisor')
        }
      }

      onLeadCreated()
      onClose()
      setFormData({
        nome_cliente: '',
        cpf: '',
        telefone: '',
        origem: 'WhatsApp',
        tipo_consulta_interesse: userTipoNegocio?.nome === 'b2b' ? 'tecnologia' : userTipoNegocio?.nome === 'previdenciario' ? 'Análise de Viabilidade' : 'Consulta Rating',
        valor_estimado_divida: '',
        tempo_negativado: '',
        porte_empresa: 'pequena',
        segmento_empresa: 'tecnologia',
        nome_empresa: '',
        cnpj: '',
        falando_com_responsavel: false
      })
    } catch (error) {
      console.error('Erro ao criar lead:', error)
    } finally {
      setLoading(false)
    }
  }

  if (!isOpen) return null

  const modalContent = (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4" style={{ zIndex: 9999 }}>
      <div className="bg-white rounded-lg p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-medium">Criar Novo Lead</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome do Cliente *
            </label>
            <input
              type="text"
              required
              value={formData.nome_cliente}
              onChange={(e) => setFormData(prev => ({ ...prev, nome_cliente: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {userTipoNegocio?.nome === 'b2b' ? (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nome da Empresa *
                </label>
                <input
                  type="text"
                  required
                  placeholder="Ex: Tech Solutions Ltda"
                  value={formData.nome_empresa}
                  onChange={(e) => setFormData(prev => ({ ...prev, nome_empresa: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  CNPJ
                </label>
                <input
                  type="text"
                  placeholder="00.000.000/0000-00"
                  value={formData.cnpj}
                  onChange={(e) => setFormData(prev => ({ ...prev, cnpj: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </>
          ) : (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                CPF
              </label>
              <input
                type="text"
                placeholder="000.000.000-00"
                value={formData.cpf}
                onChange={(e) => setFormData(prev => ({ ...prev, cpf: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone *
            </label>
            <input
              type="tel"
              required
              placeholder="(11) 99999-9999"
              value={formData.telefone}
              onChange={(e) => setFormData(prev => ({ ...prev, telefone: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Origem
            </label>
            <select
              value={formData.origem}
              onChange={(e) => setFormData(prev => ({ ...prev, origem: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="WhatsApp">WhatsApp</option>
              <option value="Site">Site</option>
              <option value="Indicação">Indicação</option>
              <option value="Telefone">Telefone</option>
              <option value="Facebook">Facebook</option>
              <option value="Instagram">Instagram</option>
              <option value="Google">Google</option>
              <option value="Outros">Outros</option>
            </select>
          </div>

          {/* Campos específicos baseados no tipo de negócio */}
          {userTipoNegocio?.nome === 'b2b' ? (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Segmento da Empresa
                </label>
                <select
                  value={formData.segmento_empresa}
                  onChange={(e) => setFormData(prev => ({ ...prev, segmento_empresa: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="tecnologia">Tecnologia</option>
                  <option value="saude">Saúde</option>
                  <option value="educacao">Educação</option>
                  <option value="financeiro">Financeiro</option>
                  <option value="varejo">Varejo</option>
                  <option value="industria">Indústria</option>
                  <option value="servicos">Serviços</option>
                  <option value="outros">Outros</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Porte da Empresa
                </label>
                <select
                  value={formData.porte_empresa}
                  onChange={(e) => setFormData(prev => ({ ...prev, porte_empresa: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="pequena">Pequena (até 50 funcionários)</option>
                  <option value="media">Média (50-500 funcionários)</option>
                  <option value="grande">Grande (500-1000 funcionários)</option>
                  <option value="multinacional">Multinacional (+1000 funcionários)</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Contato Responsável
                </label>
                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={formData.falando_com_responsavel}
                    onChange={(e) => setFormData(prev => ({ ...prev, falando_com_responsavel: e.target.checked }))}
                    className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">
                    Essa pessoa é o responsável pelas decisões da empresa
                  </span>
                </div>
              </div>
            </>
          ) : (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {userTipoNegocio?.nome === 'previdenciario' ? 'Tipo de Serviço' : 'Tipo de Consulta de Interesse'}
              </label>
              <select
                value={formData.tipo_consulta_interesse}
                onChange={(e) => setFormData(prev => ({ ...prev, tipo_consulta_interesse: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {userTipoNegocio?.nome === 'previdenciario' ? (
                  <>
                    <option value="Análise de Viabilidade">Análise de Viabilidade</option>
                    <option value="Revisão de Benefício">Revisão de Benefício</option>
                    <option value="Recurso INSS">Recurso INSS</option>
                    <option value="Aposentadoria">Aposentadoria</option>
                    <option value="Auxílio Doença">Auxílio Doença</option>
                    <option value="BPC/LOAS">BPC/LOAS</option>
                  </>
                ) : (
                  <>
                    <option value="Consulta Rating">Consulta Rating</option>
                    <option value="Consulta Completa">Consulta Completa</option>
                    <option value="Análise de Crédito">Análise de Crédito</option>
                    <option value="Limpa Nome">Limpa Nome</option>
                  </>
                )}
              </select>
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {userTipoNegocio?.nome === 'b2b'
                ? 'Budget Disponível (R$)'
                : userTipoNegocio?.nome === 'previdenciario'
                  ? 'Valor do Caso Estimado'
                  : 'Valor Estimado da Dívida'
              }
            </label>
            <input
              type="number"
              step="0.01"
              placeholder="0.00"
              value={formData.valor_estimado_divida}
              onChange={(e) => setFormData(prev => ({ ...prev, valor_estimado_divida: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {userTipoNegocio?.nome === 'b2b' ? (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Observações
              </label>
              <input
                type="text"
                placeholder="Ex: Interessado em automação, tem urgência..."
                value={formData.tempo_negativado}
                onChange={(e) => setFormData(prev => ({ ...prev, tempo_negativado: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          ) : userTipoNegocio?.nome === 'previdenciario' ? (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Situação Atual
              </label>
              <input
                type="text"
                placeholder="Ex: Aposentado, Trabalhando, Afastado"
                value={formData.tempo_negativado}
                onChange={(e) => setFormData(prev => ({ ...prev, tempo_negativado: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          ) : (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tempo Negativado
              </label>
              <input
                type="text"
                placeholder="Ex: 2 anos, 6 meses"
                value={formData.tempo_negativado}
                onChange={(e) => setFormData(prev => ({ ...prev, tempo_negativado: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          )}

          <div className="flex gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={loading}
              className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? 'Criando...' : 'Criar Lead'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )

  return createPortal(modalContent, document.body)
}

interface EditLeadModalProps {
  isOpen: boolean
  onClose: () => void
  lead: Lead | null
  onLeadUpdated: () => void
  availableStatuses: string[]
  userTipoNegocio: any
}

function EditLeadModal({ isOpen, onClose, lead, onLeadUpdated, availableStatuses, userTipoNegocio }: EditLeadModalProps) {
  const [formData, setFormData] = useState({
    nome_cliente: '',
    cpf_cnpj: '',
    telefone: '',
    origem: 'WhatsApp',
    status_generico: '',
    tipo_consulta_interesse: '',
    valor_estimado_divida: '',
    tempo_negativado: '',
    nome_empresa: '',
    observacoes_limpa_nome: '',
    dados_personalizados: {},
    responsavel_encontrado: false,
    falando_com_responsavel: false
  })

  const [loading, setLoading] = useState(false)

  // Atualizar formData quando o lead mudar
  useEffect(() => {
    if (lead && isOpen) {
      setFormData({
        nome_cliente: lead.nome_cliente || '',
        cpf_cnpj: lead.cpf_cnpj || '',
        telefone: lead.telefone || '',
        origem: lead.origem || 'WhatsApp',
        status_generico: lead.status_generico || lead.status_limpa_nome || '',
        tipo_consulta_interesse: lead.tipo_consulta_interesse || '',
        valor_estimado_divida: lead.valor_estimado_divida?.toString() || '',
        tempo_negativado: lead.tempo_negativado || '',
        nome_empresa: lead.nome_empresa || '',
        observacoes_limpa_nome: lead.observacoes_limpa_nome || '',
        dados_personalizados: lead.dados_personalizados || {},
        responsavel_encontrado: lead.responsavel_encontrado || false,
        falando_com_responsavel: lead.falando_com_responsavel || false
      })
    }
  }, [lead, isOpen])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!lead) return

    setLoading(true)

    try {
      const updateData: any = {
        nome_cliente: formData.nome_cliente,
        telefone: formData.telefone,
        origem: formData.origem,
        observacoes_limpa_nome: formData.observacoes_limpa_nome,
        responsavel_encontrado: formData.responsavel_encontrado,
        falando_com_responsavel: formData.falando_com_responsavel
      }

      // Campos específicos baseados no tipo de negócio
      if (userTipoNegocio?.nome === 'b2b') {
        updateData.cpf_cnpj = formData.cpf_cnpj
        updateData.nome_empresa = formData.nome_empresa
        updateData.status_generico = formData.status_generico

        // Atualizar dados personalizados para B2B
        updateData.dados_personalizados = {
          ...formData.dados_personalizados,
          ...(formData.valor_estimado_divida && { budget_disponivel: parseFloat(formData.valor_estimado_divida) })
        }

        // Auto-alterar status quando marca responsável encontrado
        if (formData.responsavel_encontrado && !lead.responsavel_encontrado) {
          updateData.status_generico = 'responsavel_encontrado'
        }
      } else {
        // Limpa Nome e outros
        updateData.cpf = formData.cpf_cnpj
        updateData.status_limpa_nome = formData.status_generico
        updateData.tipo_consulta_interesse = formData.tipo_consulta_interesse
        updateData.tempo_negativado = formData.tempo_negativado

        if (formData.valor_estimado_divida) {
          updateData.valor_estimado_divida = parseFloat(formData.valor_estimado_divida)
        }
      }

      const { error } = await supabase
        .from('leads')
        .update(updateData)
        .eq('id', lead.id)

      if (error) throw error

      onLeadUpdated()
      onClose()
    } catch (error) {
      console.error('Erro ao atualizar lead:', error)
    } finally {
      setLoading(false)
    }
  }

  if (!isOpen) return null

  const modalContent = (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-xl font-semibold text-gray-900">Editar Lead</h2>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X className="h-6 w-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Nome</label>
              <input
                type="text"
                required
                value={formData.nome_cliente}
                onChange={(e) => setFormData(prev => ({ ...prev, nome_cliente: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {userTipoNegocio?.nome === 'b2b' ? 'CNPJ' : 'CPF'}
              </label>
              <input
                type="text"
                value={formData.cpf_cnpj}
                onChange={(e) => setFormData(prev => ({ ...prev, cpf_cnpj: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder={userTipoNegocio?.nome === 'b2b' ? '00.000.000/0000-00' : '000.000.000-00'}
              />
            </div>

            {userTipoNegocio?.nome === 'b2b' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Nome da Empresa</label>
                <input
                  type="text"
                  value={formData.nome_empresa}
                  onChange={(e) => setFormData(prev => ({ ...prev, nome_empresa: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Telefone</label>
              <input
                type="tel"
                required
                value={formData.telefone}
                onChange={(e) => setFormData(prev => ({ ...prev, telefone: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="(00) 00000-0000"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Origem</label>
              <select
                value={formData.origem}
                onChange={(e) => setFormData(prev => ({ ...prev, origem: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="WhatsApp">WhatsApp</option>
                <option value="Site">Site</option>
                <option value="Facebook">Facebook</option>
                <option value="Google">Google</option>
                <option value="Indicação">Indicação</option>
                <option value="Evento">Evento</option>
                <option value="Telefone">Telefone</option>
                <option value="Email">Email</option>
                <option value="Outros">Outros</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <select
                value={formData.status_generico}
                onChange={(e) => setFormData(prev => ({ ...prev, status_generico: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              >
                <option value="">Selecione um status</option>
                {availableStatuses.map((status) => {
                  const config = generateStatusConfig(status)
                  return (
                    <option key={status} value={status}>{config.label}</option>
                  )
                })}
              </select>
            </div>

            {userTipoNegocio?.nome !== 'b2b' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Tipo de Consulta</label>
                  <select
                    value={formData.tipo_consulta_interesse}
                    onChange={(e) => setFormData(prev => ({ ...prev, tipo_consulta_interesse: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione o tipo</option>
                    <option value="Consulta Básica">Consulta Básica</option>
                    <option value="Consulta Rating">Consulta Rating</option>
                    <option value="Consulta Completa">Consulta Completa</option>
                    <option value="Limpa Nome">Limpa Nome</option>
                    <option value="Análise de Crédito">Análise de Crédito</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Tempo Negativado</label>
                  <input
                    type="text"
                    value={formData.tempo_negativado}
                    onChange={(e) => setFormData(prev => ({ ...prev, tempo_negativado: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: 2 anos"
                  />
                </div>
              </>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {userTipoNegocio?.nome === 'b2b' ? 'Budget Disponível' : 'Valor Estimado Dívida'}
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.valor_estimado_divida}
                onChange={(e) => setFormData(prev => ({ ...prev, valor_estimado_divida: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="0.00"
              />
            </div>

            {userTipoNegocio?.nome === 'b2b' && (
              <div className="col-span-2 space-y-3">
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="responsavel_encontrado"
                    checked={formData.responsavel_encontrado}
                    onChange={(e) => setFormData(prev => ({ ...prev, responsavel_encontrado: e.target.checked }))}
                    className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="responsavel_encontrado" className="text-sm font-medium text-gray-700">
                    Responsável Encontrado
                  </label>
                </div>

                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="falando_com_responsavel"
                    checked={formData.falando_com_responsavel}
                    onChange={(e) => setFormData(prev => ({ ...prev, falando_com_responsavel: e.target.checked }))}
                    className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="falando_com_responsavel" className="text-sm font-medium text-gray-700">
                    Falando com Responsável
                  </label>
                </div>
              </div>
            )}

            <div className="col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">Observações</label>
              <textarea
                rows={3}
                value={formData.observacoes_limpa_nome}
                onChange={(e) => setFormData(prev => ({ ...prev, observacoes_limpa_nome: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Observações sobre o lead..."
              />
            </div>
          </div>

          <div className="flex justify-end space-x-3 pt-4 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? 'Salvando...' : 'Salvar Alterações'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )

  return createPortal(modalContent, document.body)
}
