'use client'

import { useEffect, useState } from 'react'
import { createPortal } from 'react-dom'
import { supabase, Lead } from '../../lib/supabase'
import { useAuth } from '../../components/AuthWrapper'
import { Phone, User, Plus, DollarSign, FileText, AlertCircle, CheckCircle, Clock, Users, LayoutGrid, List, Search, Filter, X, BarChart3, TrendingUp, Calendar, FileBarChart, Target, Activity, MessageSquare, Edit3, Save, ChevronDown } from 'lucide-react'

const STATUS_CONFIG = {
  // Status Limpa Nome
  'novo_lead': { label: 'Novo Lead', color: 'bg-blue-100 text-blue-800', icon: Users },
  'qualificacao': { label: 'Qualificação', color: 'bg-yellow-100 text-yellow-800', icon: Clock },
  'desqualificado': { label: 'Desqualificado', color: 'bg-red-100 text-red-800', icon: AlertCircle },
  'pagamento_consulta': { label: 'Pagamento Consulta', color: 'bg-purple-100 text-purple-800', icon: DollarSign },
  'nao_consta_divida': { label: 'Não Consta Dívida', color: 'bg-green-100 text-green-800', icon: CheckCircle },
  'consta_divida': { label: 'Consta Dívida', color: 'bg-orange-100 text-orange-800', icon: FileText },
  'enviado_para_negociacao': { label: 'Em Negociação', color: 'bg-indigo-100 text-indigo-800', icon: User },
  'cliente_fechado': { label: 'Cliente Fechado', color: 'bg-green-100 text-green-800', icon: CheckCircle },

  // Status Previdenciário
  'novo_caso': { label: 'Novo Caso', color: 'bg-blue-100 text-blue-800', icon: Users },
  'analise_viabilidade': { label: 'Análise Viabilidade', color: 'bg-yellow-100 text-yellow-800', icon: Clock },
  'caso_viavel': { label: 'Caso Viável', color: 'bg-green-100 text-green-800', icon: CheckCircle },
  'caso_inviavel': { label: 'Caso Inviável', color: 'bg-red-100 text-red-800', icon: AlertCircle },
  'contrato_enviado': { label: 'Contrato Enviado', color: 'bg-purple-100 text-purple-800', icon: FileText },
  'contrato_assinado': { label: 'Contrato Assinado', color: 'bg-indigo-100 text-indigo-800', icon: DollarSign },
  'processo_iniciado': { label: 'Processo Iniciado', color: 'bg-orange-100 text-orange-800', icon: Activity },
  'caso_finalizado': { label: 'Caso Finalizado', color: 'bg-green-100 text-green-800', icon: CheckCircle },

  // Status B2B
  'novo_contato': { label: 'Novo Contato', color: 'bg-blue-100 text-blue-800', icon: Users },
  'qualificacao_inicial': { label: 'Qualificação Inicial', color: 'bg-yellow-100 text-yellow-800', icon: Clock },
  'mapeando_decisor': { label: 'Mapeando Decisor', color: 'bg-orange-100 text-orange-800', icon: User },
  'contato_decisor': { label: 'Contato Decisor', color: 'bg-purple-100 text-purple-800', icon: MessageSquare },
  'apresentacao_realizada': { label: 'Apresentação Realizada', color: 'bg-indigo-100 text-indigo-800', icon: Activity },
  'proposta_enviada': { label: 'Proposta Enviada', color: 'bg-teal-100 text-teal-800', icon: FileText },
  'negociacao': { label: 'Negociação', color: 'bg-amber-100 text-amber-800', icon: MessageSquare },
  'negocio_fechado': { label: 'Negócio Fechado', color: 'bg-green-100 text-green-800', icon: CheckCircle },
}

// Função para gerar config de status dinamicamente baseado no tipo de negócio
const generateStatusConfig = (status: string) => {
  // Se já existe no config estático, usar ele
  if (STATUS_CONFIG[status as keyof typeof STATUS_CONFIG]) {
    return STATUS_CONFIG[status as keyof typeof STATUS_CONFIG]
  }

  // Gerar config baseado na nomenclatura do status
  let label = status.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())
  let color = 'bg-gray-100 text-gray-800'
  let icon = FileText

  // Mapear cores e ícones baseados em palavras-chave
  if (status.includes('novo')) {
    color = 'bg-blue-100 text-blue-800'
    icon = Users
  } else if (status.includes('analise') || status.includes('qualific')) {
    color = 'bg-yellow-100 text-yellow-800'
    icon = Clock
  } else if (status.includes('viavel') || status.includes('divida') || status.includes('proposta')) {
    color = 'bg-orange-100 text-orange-800'
    icon = FileText
  } else if (status.includes('contrato') || status.includes('pagamento')) {
    color = 'bg-purple-100 text-purple-800'
    icon = DollarSign
  } else if (status.includes('negociacao') || status.includes('apresentacao')) {
    color = 'bg-indigo-100 text-indigo-800'
    icon = MessageSquare
  } else if (status.includes('finalizado') || status.includes('fechado') || status.includes('assinado')) {
    color = 'bg-green-100 text-green-800'
    icon = CheckCircle
  } else if (status.includes('inviavel') || status.includes('desqualificado') || status.includes('perdido')) {
    color = 'bg-red-100 text-red-800'
    icon = AlertCircle
  } else if (status.includes('processo') || status.includes('iniciado')) {
    color = 'bg-blue-100 text-blue-800'
    icon = Activity
  } else if (status.includes('agendada') || status.includes('agenda')) {
    color = 'bg-purple-100 text-purple-800'
    icon = Calendar
  }

  return { label, color, icon }
}

interface CreateLeadModalProps {
  isOpen: boolean
  onClose: () => void
  onLeadCreated: () => void
  userId?: string
}

function CreateLeadModal({ isOpen, onClose, onLeadCreated, userId }: CreateLeadModalProps) {
  const [formData, setFormData] = useState({
    nome_cliente: '',
    cpf: '',
    telefone: '',
    origem: 'WhatsApp',
    tipo_consulta_interesse: 'Consulta Rating',
    valor_estimado_divida: '',
    tempo_negativado: '',
    porte_empresa: 'pequena',
    segmento_empresa: 'tecnologia',
    nome_empresa: '',
    cnpj: '',
    falando_com_responsavel: false
  })
  const [loading, setLoading] = useState(false)
  const [userTipoNegocio, setUserTipoNegocio] = useState<any>(null)

  // Buscar tipo de negócio do usuário
  useEffect(() => {
    if (userId && isOpen) {
      fetchUserTipoNegocio()
    }
  }, [userId, isOpen])

  const fetchUserTipoNegocio = async () => {
    console.log('Modal: Buscando tipo de negócio para userId:', userId)
    try {
      const { data, error } = await supabase
        .from('user_tipos_negocio')
        .select(`
          tipo_negocio_id,
          tipos_negocio!inner (
            id,
            nome,
            descricao
          )
        `)
        .eq('user_id', userId)
        .single()

      console.log('Modal: Resultado da busca:', data, 'Error:', error)

      if (error) throw error
      setUserTipoNegocio(data?.tipos_negocio)

      // Ajustar valor inicial baseado no tipo de negócio
      const tipoNegocio = Array.isArray(data?.tipos_negocio) ? data?.tipos_negocio[0] : data?.tipos_negocio
      if (tipoNegocio?.nome === 'previdenciario') {
        console.log('Modal: Configurando para previdenciário')
        setFormData(prev => ({ ...prev, tipo_consulta_interesse: 'Análise de Viabilidade' }))
      } else {
        console.log('Modal: Configurando para limpa nome')
        setFormData(prev => ({ ...prev, tipo_consulta_interesse: 'Consulta Rating' }))
      }
    } catch (error) {
      console.error('Erro ao buscar tipo de negócio:', error)
      // Fallback baseado no usuário
      if (userId === '28') {
        console.log('Modal: Configurando usuário 28 como previdenciário (fallback)')
        setUserTipoNegocio({ id: 2, nome: 'previdenciario', descricao: 'Advogado Previdenciário' })
        setFormData(prev => ({ ...prev, tipo_consulta_interesse: 'Análise de Viabilidade' }))
      } else {
        setUserTipoNegocio({ nome: 'limpa_nome' })
        setFormData(prev => ({ ...prev, tipo_consulta_interesse: 'Consulta Rating' }))
      }
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!userId) return

    setLoading(true)
    try {
      // Determinar status inicial e tipo_negocio_id baseado no tipo
      let statusInicial = 'novo_lead'
      let tipoNegocioId = 1

      if (userTipoNegocio?.nome === 'previdenciario') {
        statusInicial = 'novo_caso'
        tipoNegocioId = 2
      } else if (userTipoNegocio?.nome === 'b2b') {
        statusInicial = 'novo_contato'
        tipoNegocioId = 3
      }

      // Estruturar dados personalizados baseado no tipo
      let dadosPersonalizados = {}

      if (userTipoNegocio?.nome === 'b2b') {
        dadosPersonalizados = {
          segmento_empresa: formData.segmento_empresa,
          porte_empresa: formData.porte_empresa,
          budget_disponivel: formData.valor_estimado_divida ? parseFloat(formData.valor_estimado_divida) : null,
          observacoes: formData.tempo_negativado || null
        }
      } else if (userTipoNegocio?.nome === 'previdenciario') {
        dadosPersonalizados = {
          tipo_servico: formData.tipo_consulta_interesse,
          valor_estimado_caso: formData.valor_estimado_divida ? parseFloat(formData.valor_estimado_divida) : null,
          situacao_atual: formData.tempo_negativado || null
        }
      } else {
        // Limpa nome
        dadosPersonalizados = {
          tipo_consulta_interesse: formData.tipo_consulta_interesse,
          valor_estimado_divida: formData.valor_estimado_divida ? parseFloat(formData.valor_estimado_divida) : null,
          tempo_negativado: formData.tempo_negativado || null
        }
      }

      const leadData = {
        user_id: parseInt(userId || '0'),
        nome_cliente: formData.nome_cliente,
        cpf_cnpj: userTipoNegocio?.nome === 'b2b' ? formData.cnpj : formData.cpf || null,
        telefone: formData.telefone,
        origem: formData.origem,
        status_generico: statusInicial,
        tipo_negocio_id: tipoNegocioId,
        dados_personalizados: dadosPersonalizados,
        nome_empresa: userTipoNegocio?.nome === 'b2b' ? formData.nome_empresa || null : null,
        falando_com_responsavel: userTipoNegocio?.nome === 'b2b' ? formData.falando_com_responsavel : null
      }

      const { error } = await supabase
        .from('leads')
        .insert([leadData])

      if (error) throw error

      // Se é B2B e falando com responsável, mover outros leads da mesma empresa para mapeando_decisor
      if (userTipoNegocio?.nome === 'b2b' && formData.falando_com_responsavel && formData.nome_empresa) {
        const { error: updateError } = await supabase
          .from('leads')
          .update({
            status_generico: 'mapeando_decisor',
            updated_at: new Date().toISOString()
          })
          .eq('nome_empresa', formData.nome_empresa)
          .eq('user_id', parseInt(userId || '0'))
          .neq('status_generico', 'novo_contato') // Não alterar o lead recém criado
          .neq('status_generico', 'negocio_fechado') // Não alterar leads já fechados
          .neq('status_generico', 'desqualificado') // Não alterar leads desqualificados

        if (updateError) {
          console.error('Erro ao atualizar leads da mesma empresa:', updateError)
        } else {
          console.log('Leads da empresa', formData.nome_empresa, 'movidos para mapeando_decisor')
        }
      }

      onLeadCreated()
      onClose()
      setFormData({
        nome_cliente: '',
        cpf: '',
        telefone: '',
        origem: 'WhatsApp',
        tipo_consulta_interesse: userTipoNegocio?.nome === 'b2b' ? 'tecnologia' : userTipoNegocio?.nome === 'previdenciario' ? 'Análise de Viabilidade' : 'Consulta Rating',
        valor_estimado_divida: '',
        tempo_negativado: '',
        porte_empresa: 'pequena',
        segmento_empresa: 'tecnologia',
        nome_empresa: '',
        cnpj: '',
        falando_com_responsavel: false
      })
    } catch (error) {
      console.error('Erro ao criar lead:', error)
    } finally {
      setLoading(false)
    }
  }

  if (!isOpen) return null

  const modalContent = (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4" style={{ zIndex: 9999 }}>
      <div className="bg-white rounded-lg p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-medium">Criar Novo Lead</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome do Cliente *
            </label>
            <input
              type="text"
              required
              value={formData.nome_cliente}
              onChange={(e) => setFormData(prev => ({ ...prev, nome_cliente: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {userTipoNegocio?.nome === 'b2b' ? (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nome da Empresa *
                </label>
                <input
                  type="text"
                  required
                  placeholder="Ex: Tech Solutions Ltda"
                  value={formData.nome_empresa}
                  onChange={(e) => setFormData(prev => ({ ...prev, nome_empresa: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  CNPJ
                </label>
                <input
                  type="text"
                  placeholder="00.000.000/0000-00"
                  value={formData.cnpj}
                  onChange={(e) => setFormData(prev => ({ ...prev, cnpj: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </>
          ) : (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                CPF
              </label>
              <input
                type="text"
                placeholder="000.000.000-00"
                value={formData.cpf}
                onChange={(e) => setFormData(prev => ({ ...prev, cpf: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone *
            </label>
            <input
              type="tel"
              required
              placeholder="(11) 99999-9999"
              value={formData.telefone}
              onChange={(e) => setFormData(prev => ({ ...prev, telefone: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Origem
            </label>
            <select
              value={formData.origem}
              onChange={(e) => setFormData(prev => ({ ...prev, origem: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="WhatsApp">WhatsApp</option>
              <option value="Site">Site</option>
              <option value="Indicação">Indicação</option>
              <option value="Telefone">Telefone</option>
              <option value="Facebook">Facebook</option>
              <option value="Instagram">Instagram</option>
              <option value="Google">Google</option>
              <option value="Outros">Outros</option>
            </select>
          </div>

          {/* Campos específicos baseados no tipo de negócio */}
          {userTipoNegocio?.nome === 'b2b' ? (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Segmento da Empresa
                </label>
                <select
                  value={formData.segmento_empresa}
                  onChange={(e) => setFormData(prev => ({ ...prev, segmento_empresa: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="tecnologia">Tecnologia</option>
                  <option value="saude">Saúde</option>
                  <option value="educacao">Educação</option>
                  <option value="financeiro">Financeiro</option>
                  <option value="varejo">Varejo</option>
                  <option value="industria">Indústria</option>
                  <option value="servicos">Serviços</option>
                  <option value="outros">Outros</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Porte da Empresa
                </label>
                <select
                  value={formData.porte_empresa}
                  onChange={(e) => setFormData(prev => ({ ...prev, porte_empresa: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="pequena">Pequena (até 50 funcionários)</option>
                  <option value="media">Média (50-500 funcionários)</option>
                  <option value="grande">Grande (500-1000 funcionários)</option>
                  <option value="multinacional">Multinacional (+1000 funcionários)</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Contato Responsável
                </label>
                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={formData.falando_com_responsavel}
                    onChange={(e) => setFormData(prev => ({ ...prev, falando_com_responsavel: e.target.checked }))}
                    className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">
                    Essa pessoa é o responsável pelas decisões da empresa
                  </span>
                </div>
              </div>
            </>
          ) : (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {userTipoNegocio?.nome === 'previdenciario' ? 'Tipo de Serviço' : 'Tipo de Consulta de Interesse'}
              </label>
              <select
                value={formData.tipo_consulta_interesse}
                onChange={(e) => setFormData(prev => ({ ...prev, tipo_consulta_interesse: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {userTipoNegocio?.nome === 'previdenciario' ? (
                  <>
                    <option value="Análise de Viabilidade">Análise de Viabilidade</option>
                    <option value="Revisão de Benefício">Revisão de Benefício</option>
                    <option value="Recurso INSS">Recurso INSS</option>
                    <option value="Aposentadoria">Aposentadoria</option>
                    <option value="Auxílio Doença">Auxílio Doença</option>
                    <option value="BPC/LOAS">BPC/LOAS</option>
                  </>
                ) : (
                  <>
                    <option value="Consulta Rating">Consulta Rating</option>
                    <option value="Consulta Completa">Consulta Completa</option>
                    <option value="Análise de Crédito">Análise de Crédito</option>
                    <option value="Limpa Nome">Limpa Nome</option>
                  </>
                )}
              </select>
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {userTipoNegocio?.nome === 'b2b'
                ? 'Budget Disponível (R$)'
                : userTipoNegocio?.nome === 'previdenciario'
                  ? 'Valor do Caso Estimado'
                  : 'Valor Estimado da Dívida'
              }
            </label>
            <input
              type="number"
              step="0.01"
              placeholder="0.00"
              value={formData.valor_estimado_divida}
              onChange={(e) => setFormData(prev => ({ ...prev, valor_estimado_divida: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {userTipoNegocio?.nome === 'b2b' ? (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Observações
              </label>
              <input
                type="text"
                placeholder="Ex: Interessado em automação, tem urgência..."
                value={formData.tempo_negativado}
                onChange={(e) => setFormData(prev => ({ ...prev, tempo_negativado: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          ) : userTipoNegocio?.nome === 'previdenciario' ? (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Situação Atual
              </label>
              <input
                type="text"
                placeholder="Ex: Aposentado, Trabalhando, Afastado"
                value={formData.tempo_negativado}
                onChange={(e) => setFormData(prev => ({ ...prev, tempo_negativado: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          ) : (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tempo Negativado
              </label>
              <input
                type="text"
                placeholder="Ex: 2 anos, 6 meses"
                value={formData.tempo_negativado}
                onChange={(e) => setFormData(prev => ({ ...prev, tempo_negativado: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          )}

          <div className="flex gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={loading}
              className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? 'Criando...' : 'Criar Lead'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )

  return createPortal(modalContent, document.body)
}

interface EditLeadModalProps {
  isOpen: boolean
  onClose: () => void
  lead: Lead | null
  onLeadUpdated: () => void
  availableStatuses: string[]
  userTipoNegocio: any
}

function EditLeadModal({ isOpen, onClose, lead, onLeadUpdated, availableStatuses, userTipoNegocio }: EditLeadModalProps) {
  const [formData, setFormData] = useState({
    nome_cliente: '',
    cpf_cnpj: '',
    telefone: '',
    origem: 'WhatsApp',
    status_generico: '',
    tipo_consulta_interesse: '',
    valor_estimado_divida: '',
    tempo_negativado: '',
    nome_empresa: '',
    observacoes_limpa_nome: '',
    dados_personalizados: {},
    responsavel_encontrado: false,
    falando_com_responsavel: false
  })

  const [loading, setLoading] = useState(false)

  // Atualizar formData quando o lead mudar
  useEffect(() => {
    if (lead && isOpen) {
      setFormData({
        nome_cliente: lead.nome_cliente || '',
        cpf_cnpj: lead.cpf_cnpj || '',
        telefone: lead.telefone || '',
        origem: lead.origem || 'WhatsApp',
        status_generico: lead.status_generico || lead.status_limpa_nome || '',
        tipo_consulta_interesse: lead.tipo_consulta_interesse || '',
        valor_estimado_divida: lead.valor_estimado_divida?.toString() || '',
        tempo_negativado: lead.tempo_negativado || '',
        nome_empresa: lead.nome_empresa || '',
        observacoes_limpa_nome: lead.observacoes_limpa_nome || '',
        dados_personalizados: lead.dados_personalizados || {},
        responsavel_encontrado: lead.responsavel_encontrado || false,
        falando_com_responsavel: lead.falando_com_responsavel || false
      })
    }
  }, [lead, isOpen])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!lead) return

    setLoading(true)

    try {
      const updateData: any = {
        nome_cliente: formData.nome_cliente,
        telefone: formData.telefone,
        origem: formData.origem,
        observacoes_limpa_nome: formData.observacoes_limpa_nome,
        responsavel_encontrado: formData.responsavel_encontrado,
        falando_com_responsavel: formData.falando_com_responsavel
      }

      // Campos específicos baseados no tipo de negócio
      if (userTipoNegocio?.nome === 'b2b') {
        updateData.cpf_cnpj = formData.cpf_cnpj
        updateData.nome_empresa = formData.nome_empresa
        updateData.status_generico = formData.status_generico

        // Atualizar dados personalizados para B2B
        updateData.dados_personalizados = {
          ...formData.dados_personalizados,
          ...(formData.valor_estimado_divida && { budget_disponivel: parseFloat(formData.valor_estimado_divida) })
        }

        // Auto-alterar status quando marca responsável encontrado
        if (formData.responsavel_encontrado && !lead.responsavel_encontrado) {
          updateData.status_generico = 'responsavel_encontrado'
        }
      } else {
        // Limpa Nome e outros
        updateData.cpf = formData.cpf_cnpj
        updateData.status_limpa_nome = formData.status_generico
        updateData.tipo_consulta_interesse = formData.tipo_consulta_interesse
        updateData.tempo_negativado = formData.tempo_negativado

        if (formData.valor_estimado_divida) {
          updateData.valor_estimado_divida = parseFloat(formData.valor_estimado_divida)
        }
      }

      const { error } = await supabase
        .from('leads')
        .update(updateData)
        .eq('id', lead.id)

      if (error) throw error

      onLeadUpdated()
      onClose()
    } catch (error) {
      console.error('Erro ao atualizar lead:', error)
    } finally {
      setLoading(false)
    }
  }

  if (!isOpen) return null

  const modalContent = (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-xl font-semibold text-gray-900">Editar Lead</h2>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X className="h-6 w-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Nome</label>
              <input
                type="text"
                required
                value={formData.nome_cliente}
                onChange={(e) => setFormData(prev => ({ ...prev, nome_cliente: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {userTipoNegocio?.nome === 'b2b' ? 'CNPJ' : 'CPF'}
              </label>
              <input
                type="text"
                value={formData.cpf_cnpj}
                onChange={(e) => setFormData(prev => ({ ...prev, cpf_cnpj: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder={userTipoNegocio?.nome === 'b2b' ? '00.000.000/0000-00' : '000.000.000-00'}
              />
            </div>

            {userTipoNegocio?.nome === 'b2b' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Nome da Empresa</label>
                <input
                  type="text"
                  value={formData.nome_empresa}
                  onChange={(e) => setFormData(prev => ({ ...prev, nome_empresa: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Telefone</label>
              <input
                type="tel"
                required
                value={formData.telefone}
                onChange={(e) => setFormData(prev => ({ ...prev, telefone: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="(00) 00000-0000"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Origem</label>
              <select
                value={formData.origem}
                onChange={(e) => setFormData(prev => ({ ...prev, origem: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="WhatsApp">WhatsApp</option>
                <option value="Site">Site</option>
                <option value="Facebook">Facebook</option>
                <option value="Google">Google</option>
                <option value="Indicação">Indicação</option>
                <option value="Evento">Evento</option>
                <option value="Telefone">Telefone</option>
                <option value="Email">Email</option>
                <option value="Outros">Outros</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <select
                value={formData.status_generico}
                onChange={(e) => setFormData(prev => ({ ...prev, status_generico: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              >
                <option value="">Selecione um status</option>
                {availableStatuses.map((status) => {
                  const config = generateStatusConfig(status)
                  return (
                    <option key={status} value={status}>{config.label}</option>
                  )
                })}
              </select>
            </div>

            {userTipoNegocio?.nome !== 'b2b' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Tipo de Consulta</label>
                  <select
                    value={formData.tipo_consulta_interesse}
                    onChange={(e) => setFormData(prev => ({ ...prev, tipo_consulta_interesse: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione o tipo</option>
                    <option value="Consulta Básica">Consulta Básica</option>
                    <option value="Consulta Rating">Consulta Rating</option>
                    <option value="Consulta Completa">Consulta Completa</option>
                    <option value="Limpa Nome">Limpa Nome</option>
                    <option value="Análise de Crédito">Análise de Crédito</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Tempo Negativado</label>
                  <input
                    type="text"
                    value={formData.tempo_negativado}
                    onChange={(e) => setFormData(prev => ({ ...prev, tempo_negativado: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: 2 anos"
                  />
                </div>
              </>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {userTipoNegocio?.nome === 'b2b' ? 'Budget Disponível' : 'Valor Estimado Dívida'}
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.valor_estimado_divida}
                onChange={(e) => setFormData(prev => ({ ...prev, valor_estimado_divida: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="0.00"
              />
            </div>

            {userTipoNegocio?.nome === 'b2b' && (
              <div className="col-span-2 space-y-3">
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="responsavel_encontrado"
                    checked={formData.responsavel_encontrado}
                    onChange={(e) => setFormData(prev => ({ ...prev, responsavel_encontrado: e.target.checked }))}
                    className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="responsavel_encontrado" className="text-sm font-medium text-gray-700">
                    Responsável Encontrado
                  </label>
                </div>

                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="falando_com_responsavel"
                    checked={formData.falando_com_responsavel}
                    onChange={(e) => setFormData(prev => ({ ...prev, falando_com_responsavel: e.target.checked }))}
                    className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="falando_com_responsavel" className="text-sm font-medium text-gray-700">
                    Falando com Responsável
                  </label>
                </div>
              </div>
            )}

            <div className="col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">Observações</label>
              <textarea
                rows={3}
                value={formData.observacoes_limpa_nome}
                onChange={(e) => setFormData(prev => ({ ...prev, observacoes_limpa_nome: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Observações sobre o lead..."
              />
            </div>
          </div>

          <div className="flex justify-end space-x-3 pt-4 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? 'Salvando...' : 'Salvar Alterações'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )

  return createPortal(modalContent, document.body)
}

export default function LeadsPage() {
  const { user } = useAuth()
  const [leads, setLeads] = useState<Lead[]>([])
  const [loading, setLoading] = useState(true)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [editingLead, setEditingLead] = useState<Lead | null>(null)
  const [statusFilter, setStatusFilter] = useState('todos')
  const [viewMode, setViewMode] = useState<'list' | 'kanban'>('list')
  const [searchTerm, setSearchTerm] = useState('')
  const [tipoConsultaFilter, setTipoConsultaFilter] = useState('todos')
  const [showFilters, setShowFilters] = useState(false)
  const [startDate, setStartDate] = useState('')
  const [endDate, setEndDate] = useState('')
  const [activeTab, setActiveTab] = useState<'leads' | 'relatorios'>('leads')
  const [userTipoNegocio, setUserTipoNegocio] = useState<any>(null)

  // Filters para relatórios
  const [reportFilters, setReportFilters] = useState({
    campanha: '',
    origemFilter: 'todos',
    statusRelatorio: 'todos',
    tipoConsultaRelatorio: 'todos',
    dataInicioRelatorio: '',
    dataFimRelatorio: '',
    cnpj: '',
    valorMinimo: '',
    valorMaximo: ''
  })

  const fetchLeads = async () => {
    if (!user) return

    try {
      const { data, error } = await supabase
        .from('leads')
        .select('*')
        .eq('user_id', parseInt(user.id || '0'))
        .order('created_at', { ascending: false })

      if (error) throw error
      setLeads(data || [])
    } catch (error) {
      console.error('Erro ao carregar leads:', error)
    } finally {
      setLoading(false)
    }
  }

  const createSampleLeads = async () => {
    if (!user) {
      console.error('CreateSampleLeads: Usuário não encontrado')
      return
    }

    console.log('CreateSampleLeads: Iniciando para usuário:', user.id)

    // Primeiro buscar o tipo de negócio do usuário
    try {
      const { data: userTipoData, error: userTipoError } = await supabase
        .from('user_tipos_negocio')
        .select('tipos_negocio!inner(nome)')
        .eq('user_id', user.id)
        .single()

      console.log('CreateSampleLeads: Resultado da busca tipo:', userTipoData, 'Erro:', userTipoError)

      let tipoNegocio = 'limpa_nome'

      if (userTipoError) {
        console.log('CreateSampleLeads: Erro ao buscar tipo, usando fallback')
        // Fallback baseado no usuário
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Status Atual */}
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Status Atual *
              </label>
              <select
                value={formData.status_generico}
                onChange={(e) => setFormData(prev => ({ ...prev, status_generico: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              >
                {availableStatuses.map(status => {
                  const config = generateStatusConfig(status)
                  return (
                    <option key={status} value={status}>{config.label}</option>
                  )
                })}
              </select>
            </div>

            {/* Nome do Cliente */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Nome do Cliente *
              </label>
              <input
                type="text"
                required
                value={formData.nome_cliente}
                onChange={(e) => setFormData(prev => ({ ...prev, nome_cliente: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* CPF/CNPJ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {userTipoNegocio?.nome === 'b2b' ? 'CNPJ' : 'CPF'}
              </label>
              <input
                type="text"
                placeholder={userTipoNegocio?.nome === 'b2b' ? '00.000.000/0000-00' : '000.000.000-00'}
                value={formData.cpf_cnpj}
                onChange={(e) => setFormData(prev => ({ ...prev, cpf_cnpj: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Telefone */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Telefone *
              </label>
              <input
                type="tel"
                required
                placeholder="(11) 99999-9999"
                value={formData.telefone}
                onChange={(e) => setFormData(prev => ({ ...prev, telefone: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Origem */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Origem
              </label>
              <select
                value={formData.origem}
                onChange={(e) => setFormData(prev => ({ ...prev, origem: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="WhatsApp">WhatsApp</option>
                <option value="Site">Site</option>
                <option value="Indicação">Indicação</option>
                <option value="Telefone">Telefone</option>
                <option value="Facebook">Facebook</option>
                <option value="Instagram">Instagram</option>
                <option value="Google">Google</option>
                <option value="Outros">Outros</option>
              </select>
            </div>

            {/* Campos específicos B2B */}
            {userTipoNegocio?.nome === 'b2b' && (
              <>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nome da Empresa
                  </label>
                  <input
                    type="text"
                    placeholder="Ex: Tech Solutions Ltda"
                    value={formData.nome_empresa}
                    onChange={(e) => setFormData(prev => ({ ...prev, nome_empresa: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Segmento da Empresa
                  </label>
                  <select
                    value={formData.segmento_empresa}
                    onChange={(e) => setFormData(prev => ({ ...prev, segmento_empresa: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="tecnologia">Tecnologia</option>
                    <option value="saude">Saúde</option>
                    <option value="educacao">Educação</option>
                    <option value="financeiro">Financeiro</option>
                    <option value="varejo">Varejo</option>
                    <option value="industria">Indústria</option>
                    <option value="servicos">Serviços</option>
                    <option value="outros">Outros</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Porte da Empresa
                  </label>
                  <select
                    value={formData.porte_empresa}
                    onChange={(e) => setFormData(prev => ({ ...prev, porte_empresa: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="pequena">Pequena (até 50 funcionários)</option>
                    <option value="media">Média (50-500 funcionários)</option>
                    <option value="grande">Grande (500-1000 funcionários)</option>
                    <option value="multinacional">Multinacional (+1000 funcionários)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <div className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={formData.falando_com_responsavel}
                      onChange={(e) => setFormData(prev => ({ ...prev, falando_com_responsavel: e.target.checked }))}
                      className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <label className="text-sm text-gray-700">
                      Essa pessoa é o responsável pelas decisões da empresa
                    </label>
                  </div>
                </div>
              </>
            )}

            {/* Tipo de Consulta/Serviço */}
            {userTipoNegocio?.nome !== 'b2b' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  {userTipoNegocio?.nome === 'previdenciario' ? 'Tipo de Serviço' : 'Tipo de Consulta de Interesse'}
                </label>
                <select
                  value={formData.tipo_consulta_interesse}
                  onChange={(e) => setFormData(prev => ({ ...prev, tipo_consulta_interesse: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {userTipoNegocio?.nome === 'previdenciario' ? (
                    <>
                      <option value="Análise de Viabilidade">Análise de Viabilidade</option>
                      <option value="Revisão de Benefício">Revisão de Benefício</option>
                      <option value="Recurso INSS">Recurso INSS</option>
                      <option value="Aposentadoria">Aposentadoria</option>
                      <option value="Auxílio Doença">Auxílio Doença</option>
                      <option value="BPC/LOAS">BPC/LOAS</option>
                    </>
                  ) : (
                    <>
                      <option value="Consulta Rating">Consulta Rating</option>
                      <option value="Consulta Completa">Consulta Completa</option>
                      <option value="Análise de Crédito">Análise de Crédito</option>
                      <option value="Limpa Nome">Limpa Nome</option>
                    </>
                  )}
                </select>
              </div>
            )}

            {/* Valor */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {userTipoNegocio?.nome === 'b2b'
                  ? 'Budget Disponível (R$)'
                  : userTipoNegocio?.nome === 'previdenciario'
                    ? 'Valor do Caso Estimado'
                    : 'Valor Estimado da Dívida'
                }
              </label>
              <input
                type="number"
                step="0.01"
                placeholder="0.00"
                value={formData.valor_estimado_divida}
                onChange={(e) => setFormData(prev => ({ ...prev, valor_estimado_divida: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Observações/Situação/Tempo */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {userTipoNegocio?.nome === 'b2b'
                  ? 'Observações'
                  : userTipoNegocio?.nome === 'previdenciario'
                    ? 'Situação Atual'
                    : 'Tempo Negativado'
                }
              </label>
              <input
                type="text"
                placeholder={
                  userTipoNegocio?.nome === 'b2b'
                    ? 'Ex: Interessado em automação, tem urgência...'
                    : userTipoNegocio?.nome === 'previdenciario'
                      ? 'Ex: Aposentado, Trabalhando, Afastado'
                      : 'Ex: 2 anos, 6 meses'
                }
                value={formData.tempo_negativado}
                onChange={(e) => setFormData(prev => ({ ...prev, tempo_negativado: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          <div className="flex gap-3 pt-6 border-t border-gray-200 mt-6">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={loading}
              className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 flex items-center justify-center space-x-2"
            >
              <Save className="h-4 w-4" />
              <span>{loading ? 'Salvando...' : 'Salvar Alterações'}</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  )

  return createPortal(modalContent, document.body)
}

export default function LeadsPage() {
  const { user } = useAuth()
  const [leads, setLeads] = useState<Lead[]>([])
  const [loading, setLoading] = useState(true)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [editingLead, setEditingLead] = useState<Lead | null>(null)
  const [statusFilter, setStatusFilter] = useState('todos')
  const [viewMode, setViewMode] = useState<'list' | 'kanban'>('list')
  const [searchTerm, setSearchTerm] = useState('')
  const [tipoConsultaFilter, setTipoConsultaFilter] = useState('todos')
  const [showFilters, setShowFilters] = useState(false)
  const [startDate, setStartDate] = useState('')
  const [endDate, setEndDate] = useState('')
  const [activeTab, setActiveTab] = useState<'leads' | 'relatorios'>('leads')
  const [userTipoNegocio, setUserTipoNegocio] = useState<any>(null)

  // Estados específicos para a aba Relatórios
  const [reportFilters, setReportFilters] = useState({
    campanha: '',
    origemFilter: 'todos',
    statusRelatorio: 'todos',
    tipoConsultaRelatorio: 'todos',
    dataInicioRelatorio: '',
    dataFimRelatorio: '',
    cnpj: '',
    valorMinimo: '',
    valorMaximo: ''
  })

  useEffect(() => {
    if (user) {
      fetchLeads()
      fetchUserTipoNegocio()
    }
  }, [user])

  const fetchUserTipoNegocio = async () => {
    if (!user) return

    console.log('Dashboard: Buscando tipo de negócio para usuário:', user.id)

    try {
      const { data, error } = await supabase
        .from('user_tipos_negocio')
        .select(`
          tipo_negocio_id,
          tipos_negocio!inner (
            id, nome, nome_exibicao, descricao, cor, icone,
            status_personalizados, campos_personalizados, metricas_config
          )
        `)
        .eq('user_id', user.id)
        .single()

      console.log('Dashboard: Resultado da busca:', data, 'Error:', error)

      if (error) throw error

      const tipoNegocio = data?.tipos_negocio as any
      if (tipoNegocio) {
        // Processar campos JSON
        const tipoProcessado = {
          ...tipoNegocio,
          status_personalizados: typeof tipoNegocio.status_personalizados === 'string'
            ? JSON.parse(tipoNegocio.status_personalizados)
            : tipoNegocio.status_personalizados || [],
          campos_personalizados: typeof tipoNegocio.campos_personalizados === 'string'
            ? JSON.parse(tipoNegocio.campos_personalizados)
            : tipoNegocio.campos_personalizados || [],
          metricas_config: typeof tipoNegocio.metricas_config === 'string'
            ? JSON.parse(tipoNegocio.metricas_config)
            : tipoNegocio.metricas_config || {}
        }
        setUserTipoNegocio(tipoProcessado)
        console.log('Dashboard: Tipo configurado:', tipoProcessado)
      }
    } catch (error) {
      console.error('Erro ao buscar tipo de negócio:', error)
      // Fallback baseado no usuário
      if (user.id === '28') {
        console.log('Dashboard: Configurando usuário 28 como previdenciário (fallback)')
        setUserTipoNegocio({
          id: 2,
          nome: 'previdenciario',
          nome_exibicao: 'Advogado Previdenciário',
          descricao: 'Advogado Previdenciário',
          status_personalizados: ['novo_caso', 'analise_viabilidade', 'caso_viavel', 'caso_inviavel', 'contrato_enviado', 'contrato_assinado', 'processo_iniciado', 'caso_finalizado']
        })
      } else {
        setUserTipoNegocio({
          nome: 'limpa_nome',
          nome_exibicao: 'Limpa Nome',
          status_personalizados: ['novo_lead', 'qualificacao', 'desqualificado', 'pagamento_consulta', 'nao_consta_divida', 'consta_divida', 'enviado_para_negociacao', 'cliente_fechado']
        })
      }
    }
  }

  // Labels dinâmicos baseados no tipo de negócio
  const getMetricsLabels = () => {
    if (userTipoNegocio?.nome === 'previdenciario') {
      return {
        total: 'Total de Casos',
        qualificados: 'Em Análise de Viabilidade',
        pagouConsulta: 'Casos Viáveis',
        constaDivida: 'Contratos Assinados',
        clientesFechados: 'Casos Finalizados',
        receitaConsultas: 'Receita Consultorias',
        receitaContratos: 'Receita Casos',
        ticketMedio: 'Valor Médio por Caso'
      }
    } else if (userTipoNegocio?.nome === 'b2b') {
      return {
        total: 'Total de Contatos',
        qualificados: 'Qualificação Inicial',
        pagouConsulta: 'Apresentações Realizadas',
        constaDivida: 'Propostas Enviadas',
        clientesFechados: 'Negócios Fechados',
        receitaConsultas: 'Receita Apresentações',
        receitaContratos: 'Receita Contratos',
        ticketMedio: 'Ticket Médio por Deal'
      }
    } else if (userTipoNegocio?.nome === 'limpa_nome') {
      return {
        total: 'Total de Leads',
        qualificados: 'Qualificados',
        pagouConsulta: 'Pagaram Consulta',
        constaDivida: 'Consta Dívida',
        clientesFechados: 'Clientes Fechados',
        receitaConsultas: 'Receita Consultas',
        receitaContratos: 'Receita Contratos',
        ticketMedio: 'Ticket Médio'
      }
    }

    // Fallback genérico
    return {
      total: 'Total de Leads',
      qualificados: 'Qualificados',
      pagouConsulta: 'Em Andamento',
      constaDivida: 'Casos Viáveis',
      clientesFechados: 'Fechados',
      receitaConsultas: 'Receita Principal',
      receitaContratos: 'Receita Contratos',
      ticketMedio: 'Ticket Médio'
    }
  }

  // Função utilitária para obter status relevantes baseado no tipo de negócio
  const getRelevantStatuses = () => {
    if (!userTipoNegocio) {
      // Fallback para quando não há tipo de negócio carregado
      return ['novo_lead', 'qualificacao', 'desqualificado', 'pagamento_consulta', 'nao_consta_divida', 'consta_divida', 'enviado_para_negociacao', 'cliente_fechado']
    }

    // Se há status personalizados definidos no banco, usar eles
    if (userTipoNegocio.status_personalizados && userTipoNegocio.status_personalizados.length > 0) {
      return userTipoNegocio.status_personalizados
    }

    // Fallback baseado no nome do tipo
    if (userTipoNegocio.nome === 'previdenciario') {
      return ['novo_caso', 'analise_viabilidade', 'caso_viavel', 'caso_inviavel', 'contrato_enviado', 'contrato_assinado', 'processo_iniciado', 'caso_finalizado']
    } else if (userTipoNegocio.nome === 'b2b') {
      return ['novo_contato', 'qualificacao_inicial', 'mapeando_decisor', 'contato_decisor', 'apresentacao_realizada', 'proposta_enviada', 'negociacao', 'negocio_fechado']
    } else {
      // Limpa nome e outros
      return ['novo_lead', 'qualificacao', 'desqualificado', 'pagamento_consulta', 'nao_consta_divida', 'consta_divida', 'enviado_para_negociacao', 'cliente_fechado']
    }
  }

  const fetchLeads = async () => {
    if (!user) return

    try {
      const { data, error } = await supabase
        .from('leads')
        .select('*')
        .eq('user_id', parseInt(user.id || '0'))
        .order('created_at', { ascending: false })
      
      if (error) throw error
      setLeads(data || [])
    } catch (error) {
      console.error('Erro ao carregar leads:', error)
    } finally {
      setLoading(false)
    }
  }

  const createSampleLeads = async () => {
    if (!user) {
      console.error('CreateSampleLeads: Usuário não encontrado')
      return
    }

    console.log('CreateSampleLeads: Iniciando para usuário:', user.id)

    // Primeiro buscar o tipo de negócio do usuário
    try {
      const { data: userTipoData, error: userTipoError } = await supabase
        .from('user_tipos_negocio')
        .select('tipos_negocio!inner(nome)')
        .eq('user_id', user.id)
        .single()

      console.log('CreateSampleLeads: Resultado da busca tipo:', userTipoData, 'Erro:', userTipoError)

      let tipoNegocio = 'limpa_nome'

      if (userTipoError) {
        console.log('CreateSampleLeads: Erro ao buscar tipo, usando fallback')
        // Fallback baseado no usuário
        if (user.id === '28') {
          tipoNegocio = 'previdenciario'
          console.log('CreateSampleLeads: Usuário 28 detectado, usando previdenciário')
        }
      } else {
        const tipoNegocioData = Array.isArray(userTipoData?.tipos_negocio) ? userTipoData?.tipos_negocio[0] : userTipoData?.tipos_negocio
        tipoNegocio = tipoNegocioData?.nome || 'limpa_nome'
      }

      console.log('CreateSampleLeads: Tipo detectado:', tipoNegocio)
      
      let sampleLeads: any[] = []

      if (tipoNegocio === 'previdenciario') {
        sampleLeads = [
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Maria Santos Silva',
            cpf: '123.456.789-01',
            telefone: '(11) 99999-9999',
            origem: 'WhatsApp',
            status_generico: 'novo_caso',
            tipo_negocio_id: 2,
            dados_personalizados: {
              tipo_acidente: 'trabalho',
              situacao_atual: 'Aposentada',
              tipo_servico: 'Análise de Viabilidade',
              valor_estimado_caso: 25000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'José Oliveira Costa',
            cpf: '987.654.321-00',
            telefone: '(11) 88888-8888',
            origem: 'Site',
            status_generico: 'analise_viabilidade',
            tipo_negocio_id: 2,
            dados_personalizados: {
              tipo_acidente: 'doenca_ocupacional',
              situacao_atual: 'Trabalhando',
              tipo_servico: 'Revisão de Benefício',
              valor_estimado_caso: 18000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Ana Paula Ferreira',
            cpf: '456.789.123-45',
            telefone: '(21) 77777-7777',
            origem: 'Indicação',
            status_generico: 'caso_viavel',
            tipo_negocio_id: 2,
            dados_personalizados: {
              tipo_acidente: 'invalidez',
              situacao_atual: 'Afastado',
              tipo_servico: 'Recurso INSS',
              valor_estimado_caso: 35000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Roberto Silva Machado',
            cpf: '654.321.987-00',
            telefone: '(85) 55555-5555',
            origem: 'Indicação',
            status_generico: 'contrato_enviado',
            tipo_negocio_id: 2,
            dados_personalizados: {
              tipo_acidente: 'transito',
              situacao_atual: 'Trabalhando',
              tipo_servico: 'Auxílio Doença',
              valor_estimado_caso: 28000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Carlos Eduardo Lima',
            cpf: '789.123.456-78',
            telefone: '(31) 66666-6666',
            origem: 'WhatsApp',
            status_generico: 'caso_finalizado',
            tipo_negocio_id: 2,
            dados_personalizados: {
              tipo_acidente: 'trabalho',
              situacao_atual: 'Aposentado',
              tipo_servico: 'Aposentadoria',
              valor_estimado_caso: 42000.00,
              valor_contrato: 8500.00,
              responsavel: 'Especialista Previdenciário'
            }
          }
        ]
      } else if (tipoNegocio === 'b2b') {
        // Dados para B2B
        sampleLeads = [
          {
            user_id: parseInt(user.id),
            nome_cliente: 'TechCorp Solutions',
            telefone: '(11) 3333-3333',
            origem: 'LinkedIn',
            status_generico: 'novo_contato',
            tipo_negocio_id: 3,
            dados_personalizados: {
              segmento_empresa: 'tecnologia',
              porte_empresa: 'media',
              budget_disponivel: 150000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Indústria XYZ Ltda',
            telefone: '(11) 4444-4444',
            origem: 'Site',
            status_generico: 'qualificacao_inicial',
            tipo_negocio_id: 3,
            dados_personalizados: {
              segmento_empresa: 'industria',
              porte_empresa: 'grande',
              budget_disponivel: 250000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Health Care Plus',
            telefone: '(21) 5555-5555',
            origem: 'Evento',
            status_generico: 'mapeando_decisor',
            tipo_negocio_id: 3,
            dados_personalizados: {
              segmento_empresa: 'saude',
              porte_empresa: 'media',
              budget_disponivel: 80000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'EduTech Brasil',
            telefone: '(31) 6666-6666',
            origem: 'Indicação',
            status_generico: 'contato_decisor',
            tipo_negocio_id: 3,
            dados_personalizados: {
              segmento_empresa: 'educacao',
              porte_empresa: 'pequena',
              budget_disponivel: 60000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Comercial ABC S.A.',
            telefone: '(21) 7777-7777',
            origem: 'Cold Calling',
            status_generico: 'apresentacao_realizada',
            tipo_negocio_id: 3,
            dados_personalizados: {
              segmento_empresa: 'varejo',
              porte_empresa: 'media',
              budget_disponivel: 90000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Consultoria Premium',
            telefone: '(85) 8888-8888',
            origem: 'LinkedIn',
            status_generico: 'proposta_enviada',
            tipo_negocio_id: 3,
            dados_personalizados: {
              segmento_empresa: 'servicos',
              porte_empresa: 'pequena',
              budget_disponivel: 120000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'FinanceGroup Corp',
            telefone: '(11) 9999-9999',
            origem: 'Indicação',
            status_generico: 'negociacao',
            tipo_negocio_id: 3,
            dados_personalizados: {
              segmento_empresa: 'financeiro',
              porte_empresa: 'grande',
              budget_disponivel: 300000.00
            }
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Grupo Empresarial Mega',
            telefone: '(85) 1111-1111',
            origem: 'Evento',
            status_generico: 'negocio_fechado',
            tipo_negocio_id: 3,
            dados_personalizados: {
              segmento_empresa: 'industria',
              porte_empresa: 'multinacional',
              budget_disponivel: 500000.00,
              valor_contrato: 480000.00,
              responsavel: 'Especialista B2B'
            }
          }
        ]
      } else {
        // Dados para limpa nome
        sampleLeads = [
          {
            user_id: parseInt(user.id),
            nome_cliente: 'João Silva Santos',
            cpf: '123.456.789-01',
            telefone: '(11) 99999-9999',
            origem: 'WhatsApp',
            status_limpa_nome: 'qualificacao',
            valor_estimado_divida: 15000.00,
            tempo_negativado: '2 anos',
            tipo_consulta_interesse: 'Consulta Rating',
            tipo_negocio_id: 1,
            dados_personalizados: {}
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Maria Oliveira',
            cpf: '987.654.321-00',
            telefone: '(11) 88888-8888',
            origem: 'Site',
            status_limpa_nome: 'pagamento_consulta',
            valor_estimado_divida: 8500.00,
            tempo_negativado: '1 ano e 6 meses',
            tipo_consulta_interesse: 'Consulta Completa',
            valor_pago_consulta: 199.00,
            tipo_negocio_id: 1,
            dados_personalizados: {}
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Carlos Eduardo',
            cpf: '456.789.123-45',
            telefone: '(21) 77777-7777',
            origem: 'Indicação',
            status_limpa_nome: 'consta_divida',
            valor_estimado_divida: 12000.00,
            valor_real_divida: 11547.85,
            valor_pago_consulta: 199.00,
            tempo_negativado: '3 anos',
            tipo_consulta_interesse: 'Limpa Nome',
            orgaos_negativados: ['SPC', 'SERASA', 'Banco do Brasil'],
            tipo_negocio_id: 1,
            dados_personalizados: {}
          },
          {
            user_id: parseInt(user.id),
            nome_cliente: 'Ana Paula Costa',
            cpf: '789.123.456-78',
            telefone: '(31) 66666-6666',
            origem: 'WhatsApp',
            status_limpa_nome: 'cliente_fechado',
            valor_estimado_divida: 20000.00,
            valor_real_divida: 18750.00,
            valor_pago_consulta: 199.00,
            valor_contrato: 2500.00,
            tempo_negativado: '4 anos',
            tipo_consulta_interesse: 'Análise de Crédito',
            vendedor_responsavel: 'Vendedor Principal',
            tipo_negocio_id: 1,
            dados_personalizados: {}
          }
        ]
      }

      console.log('CreateSampleLeads: Inserindo leads:', sampleLeads.length, 'leads')
      console.log('CreateSampleLeads: Dados a inserir:', JSON.stringify(sampleLeads, null, 2))

      const { data, error } = await supabase
        .from('leads')
        .insert(sampleLeads)
        .select()

      console.log('CreateSampleLeads: Resultado da inserção:', { data, error })

      if (error) {
        console.error('CreateSampleLeads: Erro na inserção:', error)
        throw error
      }
      
      console.log('CreateSampleLeads: Leads criados com sucesso!')
      fetchLeads()
    } catch (error) {
      console.error('Erro ao criar leads de exemplo:', error)
    }
  }

  const formatDate = (dateString: string | null) => {
    if (!dateString) return '-'
    try {
      return new Date(dateString).toLocaleDateString('pt-BR')
    } catch {
      return dateString
    }
  }

  const formatCurrency = (value: number | null | undefined) => {
    if (!value) return '-'
    return new Intl.NumberFormat('pt-BR', { 
      style: 'currency', 
      currency: 'BRL' 
    }).format(value)
  }

  const getStatusBadge = (status: string) => {
    const config = generateStatusConfig(status)
    const IconComponent = config.icon

    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}>
        <IconComponent className="h-3 w-3 mr-1" />
        {config.label}
      </span>
    )
  }

  const filteredLeads = leads.filter(lead => {
    // Filtro por status
    const statusMatch = statusFilter === 'todos' ||
      (lead.status_generico || lead.status_limpa_nome) === statusFilter
    
    // Filtro por tipo de consulta
    const tipoConsultaMatch = tipoConsultaFilter === 'todos' || 
      (lead.tipo_consulta_interesse && lead.tipo_consulta_interesse.toLowerCase().includes(tipoConsultaFilter.toLowerCase()))
    
    // Filtro por nome e telefone (busca)
    const searchMatch = searchTerm === '' || 
      (lead.nome_cliente && lead.nome_cliente.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (lead.telefone && lead.telefone.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (lead.cpf && lead.cpf.toLowerCase().includes(searchTerm.toLowerCase()))
    
    // Filtro por data
    let dateMatch = true
    if (startDate && lead.created_at) {
      const leadDate = new Date(lead.created_at)
      const filterStartDate = new Date(startDate)
      dateMatch = dateMatch && leadDate >= filterStartDate
    }
    if (endDate && lead.created_at) {
      const leadDate = new Date(lead.created_at)
      const filterEndDate = new Date(endDate + 'T23:59:59')
      dateMatch = dateMatch && leadDate <= filterEndDate
    }
    
    return statusMatch && tipoConsultaMatch && searchMatch && dateMatch
  })

  const getUniqueConsultaTypes = () => {
    const types = leads
      .map(lead => lead.tipo_consulta_interesse)
      .filter(type => type && type.trim() !== '')
    return [...new Set(types)]
  }

  // Função para calcular métricas avançadas de relatório
  const calculateAdvancedMetrics = (filteredLeads: Lead[]) => {
    const total = filteredLeads.length
    if (total === 0) return {
      tempoMedioResposta: 0,
      taxaResposta: 0,
      taxaSucesso: 0,
      totalContatos: 0,
      contatosComResposta: 0,
      casosSucesso: 0,
      totalMensagensEnviadas: 0
    }

    // Calcular tempo médio de resposta (assumindo que temos created_at e updated_at)
    const leadsComResposta = filteredLeads.filter(lead =>
      lead.created_at && lead.updated_at &&
      new Date(lead.updated_at) > new Date(lead.created_at) &&
      (lead.status_generico || lead.status_limpa_nome) !== 'novo_lead' &&
      (lead.status_generico || lead.status_limpa_nome) !== 'novo_caso'
    )

    const temposResposta = leadsComResposta.map(lead => {
      const criacao = new Date(lead.created_at!)
      const resposta = new Date(lead.updated_at!)
      return (resposta.getTime() - criacao.getTime()) / (1000 * 60 * 60) // em horas
    })

    const tempoMedioResposta = temposResposta.length > 0 
      ? temposResposta.reduce((a, b) => a + b, 0) / temposResposta.length 
      : 0

    // Taxa de resposta baseado em user_lastinteraction
    const totalMensagensEnviadas = filteredLeads.filter(lead =>
      lead.status_disparo || lead.numero_follow || lead.Agente_ID
    ).length
    const contatosComResposta = filteredLeads.filter(lead =>
      lead.user_lastinteraction !== null && lead.user_lastinteraction !== ''
    ).length
    const taxaResposta = totalMensagensEnviadas > 0 ? (contatosComResposta / totalMensagensEnviadas * 100) : 0

    // Taxa de sucesso (leads que chegaram ao final do funil com sucesso)
    const casosSucesso = filteredLeads.filter(lead =>
      (lead.status_generico || lead.status_limpa_nome) === 'cliente_fechado' ||
      (lead.status_generico || lead.status_limpa_nome) === 'caso_finalizado' ||
      (userTipoNegocio?.nome === 'previdenciario' && lead.dados_personalizados?.valor_contrato && lead.dados_personalizados.valor_contrato > 0)
    ).length

    const taxaSucesso = total > 0 ? (casosSucesso / total * 100) : 0

    return {
      tempoMedioResposta: Math.round(tempoMedioResposta * 10) / 10,
      taxaResposta: Math.round(taxaResposta * 10) / 10,
      taxaSucesso: Math.round(taxaSucesso * 10) / 10,
      totalContatos: total,
      contatosComResposta,
      casosSucesso,
      totalMensagensEnviadas
    }
  }

  // Funções para cálculos de relatórios
  const calculateMetrics = (filteredLeads: Lead[]) => {
    const total = filteredLeads.length

    let qualificados, pagouConsulta, constaDivida, clientesFechados

    if (userTipoNegocio?.nome === 'previdenciario') {
      // Métricas para previdenciário
      qualificados = filteredLeads.filter(lead =>
        lead.status_generico === 'analise_viabilidade' ||
        lead.status_generico === 'caso_viavel' ||
        lead.status_generico === 'contrato_enviado' ||
        lead.status_generico === 'contrato_assinado' ||
        lead.status_generico === 'caso_finalizado'
      ).length

      pagouConsulta = filteredLeads.filter(lead =>
        lead.status_generico === 'caso_viavel' ||
        lead.status_generico === 'contrato_enviado' ||
        lead.status_generico === 'contrato_assinado' ||
        lead.status_generico === 'caso_finalizado'
      ).length

      constaDivida = filteredLeads.filter(lead =>
        lead.status_generico === 'contrato_assinado' ||
        lead.status_generico === 'caso_finalizado'
      ).length

      clientesFechados = filteredLeads.filter(lead =>
        lead.status_generico === 'caso_finalizado'
      ).length
    } else if (userTipoNegocio?.nome === 'b2b') {
      // Métricas para B2B
      qualificados = filteredLeads.filter(lead =>
        lead.status_generico === 'qualificacao_inicial' ||
        lead.status_generico === 'mapeando_decisor' ||
        lead.status_generico === 'contato_decisor' ||
        lead.status_generico === 'apresentacao_realizada' ||
        lead.status_generico === 'proposta_enviada' ||
        lead.status_generico === 'negociacao' ||
        lead.status_generico === 'negocio_fechado'
      ).length

      pagouConsulta = filteredLeads.filter(lead =>
        lead.status_generico === 'apresentacao_realizada' ||
        lead.status_generico === 'proposta_enviada' ||
        lead.status_generico === 'negociacao' ||
        lead.status_generico === 'negocio_fechado'
      ).length

      constaDivida = filteredLeads.filter(lead =>
        lead.status_generico === 'proposta_enviada' ||
        lead.status_generico === 'negociacao' ||
        lead.status_generico === 'negocio_fechado'
      ).length

      clientesFechados = filteredLeads.filter(lead =>
        lead.status_generico === 'negocio_fechado'
      ).length
    } else {
      // Métricas para limpa nome (estrutura original)
      qualificados = filteredLeads.filter(lead => (lead.status_generico || lead.status_limpa_nome) !== 'desqualificado').length
      pagouConsulta = filteredLeads.filter(lead => lead.valor_pago_consulta && lead.valor_pago_consulta > 0).length
      constaDivida = filteredLeads.filter(lead => (lead.status_generico || lead.status_limpa_nome) === 'consta_divida').length
      clientesFechados = filteredLeads.filter(lead => (lead.status_generico || lead.status_limpa_nome) === 'cliente_fechado').length
    }
    
    const receitaConsultas = userTipoNegocio?.nome === 'previdenciario'
      ? filteredLeads
          .filter(lead => lead.dados_personalizados?.valor_consulta)
          .reduce((acc, lead) => acc + (lead.dados_personalizados?.valor_consulta || 0), 0)
      : filteredLeads
          .filter(lead => lead.valor_pago_consulta)
          .reduce((acc, lead) => acc + (lead.valor_pago_consulta || 0), 0)

    const receitaContratos = userTipoNegocio?.nome === 'previdenciario'
      ? filteredLeads
          .filter(lead => lead.dados_personalizados?.valor_contrato)
          .reduce((acc, lead) => acc + (lead.dados_personalizados?.valor_contrato || 0), 0)
      : filteredLeads
          .filter(lead => lead.valor_contrato)
          .reduce((acc, lead) => acc + (lead.valor_contrato || 0), 0)
    
    const ticketMedio = clientesFechados > 0 ? receitaContratos / clientesFechados : 0

    return {
      total,
      qualificados,
      pagouConsulta,
      constaDivida,
      clientesFechados,
      receitaConsultas,
      receitaContratos,
      ticketMedio,
      conversaoQualificacao: total > 0 ? (qualificados / total * 100) : 0,
      conversaoPagamento: qualificados > 0 ? (pagouConsulta / qualificados * 100) : 0,
      conversaoDivida: pagouConsulta > 0 ? (constaDivida / pagouConsulta * 100) : 0,
      conversaoFechamento: constaDivida > 0 ? (clientesFechados / constaDivida * 100) : 0
    }
  }

  const getFilteredLeadsForReport = () => {
    return leads.filter(lead => {
      const campanhaMatch = !reportFilters.campanha || 
        (lead.nome_campanha && lead.nome_campanha.toLowerCase().includes(reportFilters.campanha.toLowerCase()))
      
      const origemMatch = reportFilters.origemFilter === 'todos' || lead.origem === reportFilters.origemFilter
      const statusMatch = reportFilters.statusRelatorio === 'todos' ||
        (lead.status_generico || lead.status_limpa_nome) === reportFilters.statusRelatorio
      const tipoConsultaMatch = reportFilters.tipoConsultaRelatorio === 'todos' || lead.tipo_consulta_interesse === reportFilters.tipoConsultaRelatorio
      
      const cnpjMatch = !reportFilters.cnpj || 
        (lead.cpf && lead.cpf.replace(/\D/g, '').includes(reportFilters.cnpj.replace(/\D/g, '')))
      
      let valorMatch = true
      if (reportFilters.valorMinimo && lead.valor_estimado_divida) {
        valorMatch = valorMatch && lead.valor_estimado_divida >= parseFloat(reportFilters.valorMinimo)
      }
      if (reportFilters.valorMaximo && lead.valor_estimado_divida) {
        valorMatch = valorMatch && lead.valor_estimado_divida <= parseFloat(reportFilters.valorMaximo)
      }

      let dateMatch = true
      if (reportFilters.dataInicioRelatorio && lead.created_at) {
        const leadDate = new Date(lead.created_at)
        const filterStartDate = new Date(reportFilters.dataInicioRelatorio)
        dateMatch = dateMatch && leadDate >= filterStartDate
      }
      if (reportFilters.dataFimRelatorio && lead.created_at) {
        const leadDate = new Date(lead.created_at)
        const filterEndDate = new Date(reportFilters.dataFimRelatorio + 'T23:59:59')
        dateMatch = dateMatch && leadDate <= filterEndDate
      }
      
      return campanhaMatch && origemMatch && statusMatch && tipoConsultaMatch && cnpjMatch && valorMatch && dateMatch
    })
  }

  const renderKanbanView = () => {
    const relevantStatuses = getRelevantStatuses()
    const statusGroups = relevantStatuses.map((status: string) => ({
      status,
      config: generateStatusConfig(status),
      leads: filteredLeads.filter(lead => (lead.status_generico || lead.status_limpa_nome) === status)
    }))


    return (
      <div className="flex gap-6 overflow-x-auto pb-4">
        {statusGroups.map(({ status, config, leads: statusLeads }: { status: string, config: any, leads: any[] }) => (
          <div key={status} className="flex-shrink-0 w-80">
            <div className="bg-white rounded-lg shadow">
              <div className="px-4 py-3 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <config.icon className="h-5 w-5 text-gray-500" />
                    <h3 className="font-medium text-gray-900">{config.label}</h3>
                  </div>
                  <span className="text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                    {statusLeads.length}
                  </span>
                </div>
              </div>
              <div className="p-4 space-y-3 max-h-[600px] overflow-y-auto">
                {statusLeads.map((lead) => (
                  <div
                    key={lead.id}
                    className="rounded-lg p-4 cursor-pointer hover:bg-gray-100 transition-colors border-l-4 bg-gray-50"
                    style={{ borderLeftColor: config.color.includes('blue') ? '#3B82F6' : 
                             config.color.includes('yellow') ? '#F59E0B' : 
                             config.color.includes('red') ? '#EF4444' : 
                             config.color.includes('purple') ? '#8B5CF6' : 
                             config.color.includes('orange') ? '#F97316' : 
                             config.color.includes('indigo') ? '#6366F1' : '#10B981' }}
                    onClick={() => {
                      console.log('Card clicado:', lead.nome_cliente, lead.id)
                      setEditingLead(lead)
                      setShowEditModal(true)
                    }}
                  >
                    <div className="space-y-2">
                      <h4 className="font-medium text-gray-900">
                        {lead.nome_cliente || 'Nome não informado'}
                      </h4>
                      {lead.telefone && (
                        <div className="flex items-center text-sm text-gray-600">
                          <Phone className="h-3 w-3 mr-1" />
                          {lead.telefone}
                        </div>
                      )}
                      <div className="text-sm text-gray-600">
                        <div>Origem: {lead.origem || '-'}</div>
                        {lead.tipo_consulta_interesse && (
                          <div>Consulta: {lead.tipo_consulta_interesse}</div>
                        )}
                        {lead.nome_empresa && (
                          <div>Empresa: {lead.nome_empresa}</div>
                        )}
                        {lead.nome_campanha && (
                          <div>Campanha: {lead.nome_campanha}</div>
                        )}
                      </div>

                      {/* Indicadores visuais */}
                      <div className="flex items-center space-x-2 text-xs">
                        {lead.existe_whatsapp && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            WhatsApp
                          </span>
                        )}
                        {lead.folowup_solicitado && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                            Follow-up
                          </span>
                        )}
                        {lead.user_lastinteraction && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            Respondeu
                          </span>
                        )}
                        {lead.falando_com_responsavel && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                            Decisor
                          </span>
                        )}
                      </div>

                      {lead.valor_estimado_divida && (
                        <div className="text-sm font-medium text-green-600">
                          {formatCurrency(lead.valor_estimado_divida)}
                        </div>
                      )}
                      <div className="text-xs text-gray-500">
                        {formatDate(lead.created_at)}
                        {lead.user_lastinteraction && (
                          <span className="text-blue-600 ml-2">
                            • Última interação: {formatDate(lead.user_lastinteraction)}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
                {statusLeads.length === 0 && (
                  <div className="text-center text-gray-400 py-8">
                    <config.icon className="h-8 w-8 mx-auto mb-2" />
                    <p className="text-sm">Nenhum lead</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    )
  }

  const renderReportsTab = () => {
    const filteredReportLeads = getFilteredLeadsForReport()
    const metrics = calculateMetrics(filteredReportLeads)
    const advancedMetrics = calculateAdvancedMetrics(filteredReportLeads)

    return (
      <div className="space-y-6">
        {/* Filtros da aba Relatórios */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center mb-6">
            <FileBarChart className="h-6 w-6 text-blue-600 mr-3" />
            <h2 className="text-xl font-semibold text-gray-900">Filtros de Relatório</h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Campanha</label>
              <input
                type="text"
                placeholder="Nome da campanha..."
                value={reportFilters.campanha}
                onChange={(e) => setReportFilters(prev => ({ ...prev, campanha: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Origem</label>
              <select
                value={reportFilters.origemFilter}
                onChange={(e) => setReportFilters(prev => ({ ...prev, origemFilter: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="todos">Todas</option>
                <option value="WhatsApp">WhatsApp</option>
                <option value="Site">Site</option>
                <option value="Indicação">Indicação</option>
                <option value="Telefone">Telefone</option>
                <option value="Facebook">Facebook</option>
                <option value="Instagram">Instagram</option>
                <option value="Google">Google</option>
                <option value="Outros">Outros</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <select
                value={reportFilters.statusRelatorio}
                onChange={(e) => setReportFilters(prev => ({ ...prev, statusRelatorio: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="todos">Todos</option>
                {getRelevantStatuses().map((status: string) => {
                  const config = generateStatusConfig(status)
                  return (
                    <option key={status} value={status}>{config.label}</option>
                  )
                })}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Tipo Consulta</label>
              <select
                value={reportFilters.tipoConsultaRelatorio}
                onChange={(e) => setReportFilters(prev => ({ ...prev, tipoConsultaRelatorio: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="todos">Todos</option>
                {getUniqueConsultaTypes().map((tipo) => (
                  <option key={tipo} value={tipo}>{tipo}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Data Início</label>
              <input
                type="date"
                value={reportFilters.dataInicioRelatorio}
                onChange={(e) => setReportFilters(prev => ({ ...prev, dataInicioRelatorio: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Data Fim</label>
              <input
                type="date"
                value={reportFilters.dataFimRelatorio}
                onChange={(e) => setReportFilters(prev => ({ ...prev, dataFimRelatorio: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">CPF/CNPJ</label>
              <input
                type="text"
                placeholder="000.000.000-00"
                value={reportFilters.cnpj}
                onChange={(e) => setReportFilters(prev => ({ ...prev, cnpj: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Valor Mínimo</label>
              <input
                type="number"
                step="0.01"
                placeholder="0.00"
                value={reportFilters.valorMinimo}
                onChange={(e) => setReportFilters(prev => ({ ...prev, valorMinimo: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Valor Máximo</label>
              <input
                type="number"
                step="0.01"
                placeholder="0.00"
                value={reportFilters.valorMaximo}
                onChange={(e) => setReportFilters(prev => ({ ...prev, valorMaximo: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          <div className="flex justify-between items-center mt-6">
            <div className="text-sm text-gray-600">
              Exibindo {filteredReportLeads.length} leads dos {leads.length} totais
            </div>
            <button
              onClick={() => setReportFilters({
                campanha: '',
                origemFilter: 'todos',
                statusRelatorio: 'todos',
                tipoConsultaRelatorio: 'todos',
                dataInicioRelatorio: '',
                dataFimRelatorio: '',
                cnpj: '',
                valorMinimo: '',
                valorMaximo: ''
              })}
              className="text-blue-600 hover:text-blue-800 text-sm font-medium"
            >
              Limpar Filtros
            </button>
          </div>
        </div>

        {/* Indicadores principais */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white rounded-lg shadow p-6 border-l-4 border-blue-500">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">{metrics.total}</h3>
                <p className="text-sm text-gray-600">{getMetricsLabels().total}</p>
              </div>
              <Users className="h-8 w-8 text-blue-500" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6 border-l-4 border-yellow-500">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">{metrics.qualificados}</h3>
                <p className="text-sm text-gray-600">{getMetricsLabels().qualificados}</p>
                <p className="text-xs text-yellow-600 font-medium">{metrics.conversaoQualificacao.toFixed(1)}% conversão</p>
              </div>
              <Target className="h-8 w-8 text-yellow-500" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6 border-l-4 border-purple-500">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">{metrics.pagouConsulta}</h3>
                <p className="text-sm text-gray-600">{getMetricsLabels().pagouConsulta}</p>
                <p className="text-xs text-purple-600 font-medium">{metrics.conversaoPagamento.toFixed(1)}% conversão</p>
              </div>
              <DollarSign className="h-8 w-8 text-purple-500" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6 border-l-4 border-green-500">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">{metrics.clientesFechados}</h3>
                <p className="text-sm text-gray-600">{getMetricsLabels().clientesFechados}</p>
                <p className="text-xs text-green-600 font-medium">{metrics.conversaoFechamento.toFixed(1)}% conversão</p>
              </div>
              <CheckCircle className="h-8 w-8 text-green-500" />
            </div>
          </div>
        </div>

        {/* Métricas de Performance */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center mb-4">
              <Clock className="h-6 w-6 text-blue-600 mr-2" />
              <h3 className="text-lg font-semibold text-gray-900">Tempo Médio de Resposta</h3>
            </div>
            <p className="text-2xl font-bold text-blue-600">{advancedMetrics.tempoMedioResposta}h</p>
            <p className="text-sm text-gray-600">Baseado em {advancedMetrics.contatosComResposta} {userTipoNegocio?.nome === 'previdenciario' ? 'casos com resposta' : 'leads respondidos'}</p>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center mb-4">
              <MessageSquare className="h-6 w-6 text-green-600 mr-2" />
              <h3 className="text-lg font-semibold text-gray-900">Taxa de Resposta</h3>
            </div>
            <p className="text-2xl font-bold text-green-600">{advancedMetrics.taxaResposta}%</p>
            <p className="text-sm text-gray-600">{advancedMetrics.contatosComResposta} de {advancedMetrics.totalMensagensEnviadas || advancedMetrics.totalContatos} mensagens tiveram resposta</p>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center mb-4">
              <TrendingUp className="h-6 w-6 text-purple-600 mr-2" />
              <h3 className="text-lg font-semibold text-gray-900">Taxa de Sucesso</h3>
            </div>
            <p className="text-2xl font-bold text-purple-600">{advancedMetrics.taxaSucesso}%</p>
            <p className="text-sm text-gray-600">{advancedMetrics.casosSucesso} {userTipoNegocio?.nome === 'previdenciario' ? 'casos finalizados' : 'clientes fechados'} com sucesso</p>
          </div>
        </div>

        {/* Funil de conversão */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center mb-6">
            <Activity className="h-6 w-6 text-indigo-600 mr-3" />
            <h3 className="text-lg font-semibold text-gray-900">Funil de Conversão</h3>
          </div>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="w-4 h-4 bg-blue-500 rounded"></div>
                <span className="font-medium text-gray-900">{getMetricsLabels().total}</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-lg font-semibold text-gray-900">{metrics.total}</span>
                <div className="w-32 bg-gray-200 rounded-full h-2">
                  <div className="bg-blue-500 h-2 rounded-full" style={{ width: '100%' }}></div>
                </div>
                <span className="text-sm text-gray-600">100%</span>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="w-4 h-4 bg-yellow-500 rounded"></div>
                <span className="font-medium text-gray-900">{getMetricsLabels().qualificados}</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-lg font-semibold text-gray-900">{metrics.qualificados}</span>
                <div className="w-32 bg-gray-200 rounded-full h-2">
                  <div className="bg-yellow-500 h-2 rounded-full" style={{ width: `${metrics.conversaoQualificacao}%` }}></div>
                </div>
                <span className="text-sm text-gray-600">{metrics.conversaoQualificacao.toFixed(1)}%</span>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="w-4 h-4 bg-purple-500 rounded"></div>
                <span className="font-medium text-gray-900">{userTipoNegocio?.nome === 'previdenciario' ? 'Casos Viáveis' : getMetricsLabels().pagouConsulta}</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-lg font-semibold text-gray-900">{metrics.pagouConsulta}</span>
                <div className="w-32 bg-gray-200 rounded-full h-2">
                  <div className="bg-purple-500 h-2 rounded-full" style={{ width: `${metrics.conversaoPagamento}%` }}></div>
                </div>
                <span className="text-sm text-gray-600">{metrics.conversaoPagamento.toFixed(1)}%</span>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="w-4 h-4 bg-orange-500 rounded"></div>
                <span className="font-medium text-gray-900">{getMetricsLabels().constaDivida}</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-lg font-semibold text-gray-900">{metrics.constaDivida}</span>
                <div className="w-32 bg-gray-200 rounded-full h-2">
                  <div className="bg-orange-500 h-2 rounded-full" style={{ width: `${metrics.conversaoDivida}%` }}></div>
                </div>
                <span className="text-sm text-gray-600">{metrics.conversaoDivida.toFixed(1)}%</span>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="w-4 h-4 bg-green-500 rounded"></div>
                <span className="font-medium text-gray-900">{getMetricsLabels().clientesFechados}</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-lg font-semibold text-gray-900">{metrics.clientesFechados}</span>
                <div className="w-32 bg-gray-200 rounded-full h-2">
                  <div className="bg-green-500 h-2 rounded-full" style={{ width: `${metrics.conversaoFechamento}%` }}></div>
                </div>
                <span className="text-sm text-gray-600">{metrics.conversaoFechamento.toFixed(1)}%</span>
              </div>
            </div>
          </div>
        </div>

        {/* Distribuição por Status */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center mb-6">
            <LayoutGrid className="h-6 w-6 text-gray-600 mr-3" />
            <h3 className="text-lg font-semibold text-gray-900">Distribuição por Status</h3>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {getRelevantStatuses().map((status: string) => {
                const config = generateStatusConfig(status)
                const count = filteredReportLeads.filter(lead =>
                  (lead.status_generico === status) || (lead.status_limpa_nome === status)
                ).length
                const percentage = metrics.total > 0 ? (count / metrics.total * 100) : 0
                const IconComponent = config.icon

                return (
                <div key={status} className="bg-gray-50 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <IconComponent className="h-4 w-4 text-gray-600" />
                      <span className="text-sm font-medium text-gray-900">{config.label}</span>
                    </div>
                    <span className="text-lg font-semibold text-gray-900">{count}</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className={`h-2 rounded-full ${
                        config.color.includes('blue') ? 'bg-blue-500' :
                        config.color.includes('yellow') ? 'bg-yellow-500' :
                        config.color.includes('red') ? 'bg-red-500' :
                        config.color.includes('purple') ? 'bg-purple-500' :
                        config.color.includes('orange') ? 'bg-orange-500' :
                        config.color.includes('indigo') ? 'bg-indigo-500' : 'bg-green-500'
                      }`}
                      style={{ width: `${percentage}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600 mt-1">{percentage.toFixed(1)}%</div>
                </div>
              )
            })}
          </div>
        </div>

        {/* Lista detalhada de leads filtrados */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">Leads Filtrados ({filteredReportLeads.length})</h3>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cliente</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contato</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Origem</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Valor Estimado</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Data</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200 max-h-96 overflow-y-auto">
                {filteredReportLeads.slice(0, 50).map((lead) => (
                  <tr key={lead.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{lead.nome_cliente || '-'}</div>
                      <div className="text-sm text-gray-500">{lead.cpf || '-'}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {lead.telefone || '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {lead.origem || '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(lead.status_generico || lead.status_limpa_nome || 'novo_lead')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {formatCurrency(lead.valor_estimado_divida)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(lead.created_at)}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {filteredReportLeads.length > 50 && (
              <div className="px-6 py-4 bg-gray-50 text-sm text-gray-600">
                Mostrando 50 de {filteredReportLeads.length} leads. Use os filtros para refinar sua busca.
              </div>
            )}
          </div>
        </div>
      </div>
    )
  }

  if (loading) {
    return <div className="flex justify-center items-center h-64">Carregando leads...</div>
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="sm:flex sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">DNX Operações Inteligentes</h1>
          <p className="text-gray-600 mt-2">
            Gestão completa de leads e relatórios de performance
          </p>
        </div>
        {activeTab === 'leads' && (
          <div className="mt-4 sm:mt-0 flex items-center space-x-2">
            {/* Toggle de visualização */}
            <div className="flex items-center bg-white rounded-lg border border-gray-300">
              <button
                onClick={() => setViewMode('list')}
                className={`px-3 py-2 text-sm font-medium rounded-l-lg transition-colors ${
                  viewMode === 'list'
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
              >
                <List className="h-4 w-4" />
              </button>
              <button
                onClick={() => setViewMode('kanban')}
                className={`px-3 py-2 text-sm font-medium rounded-r-lg transition-colors ${
                  viewMode === 'kanban'
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
              >
                <LayoutGrid className="h-4 w-4" />
              </button>
            </div>

            {leads.length === 0 && (
              <button
                onClick={createSampleLeads}
                className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                <Users className="h-4 w-4 mr-2" />
                Criar Leads de Exemplo
              </button>
            )}
            <button
              onClick={() => setShowCreateForm(true)}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
            >
              <Plus className="h-4 w-4 mr-2" />
              Novo Lead
            </button>
          </div>
        )}
      </div>

      {/* Sistema de Abas */}
      <div className="bg-white rounded-lg shadow">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8 px-6" aria-label="Tabs">
            <button
              onClick={() => setActiveTab('leads')}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === 'leads'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <div className="flex items-center space-x-2">
                <Users className="h-5 w-5" />
                <span>Gestão de Leads</span>
              </div>
            </button>
            <button
              onClick={() => setActiveTab('relatorios')}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === 'relatorios'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <div className="flex items-center space-x-2">
                <BarChart3 className="h-5 w-5" />
                <span>Relatórios</span>
              </div>
            </button>
          </nav>
        </div>
      </div>

      {/* Conteúdo das Abas */}
      {activeTab === 'leads' ? (
        <div className="space-y-6">
          {/* Filtros */}
          <div className="bg-white rounded-lg shadow p-4">
            <div className="space-y-4">
              {/* Linha 1: Busca e toggle de filtros */}
              <div className="flex flex-wrap items-center gap-4">
                <div className="flex-1 min-w-64">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Buscar por nome, telefone ou CPF..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  <Filter className="h-4 w-4 mr-2" />
                  Filtros {showFilters ? 'Menos' : 'Mais'}
                </button>
              </div>

              {/* Linha 2: Filtros expandidos */}
              {showFilters && (
                <div className="flex flex-wrap items-center gap-4 pt-4 border-t border-gray-200">
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-gray-700">Status:</span>
                    <select
                      value={statusFilter}
                      onChange={(e) => setStatusFilter(e.target.value)}
                      className="text-sm border border-gray-300 rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="todos">Todos ({leads.length})</option>
                      {getRelevantStatuses().map((status: string) => {
                          const config = generateStatusConfig(status)
                          const count = leads.filter(lead => (lead.status_generico || lead.status_limpa_nome) === status).length
                          return (
                            <option key={status} value={status}>
                              {config.label} ({count})
                            </option>
                          )
                        })}
                    </select>
                  </div>

                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-gray-700">Tipo Consulta:</span>
                    <select
                      value={tipoConsultaFilter}
                      onChange={(e) => setTipoConsultaFilter(e.target.value)}
                      className="text-sm border border-gray-300 rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="todos">Todos</option>
                      {getUniqueConsultaTypes().map((tipo) => (
                        <option key={tipo} value={tipo}>
                          {tipo}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-gray-700">Data início:</span>
                    <input
                      type="date"
                      value={startDate}
                      onChange={(e) => setStartDate(e.target.value)}
                      className="text-sm border border-gray-300 rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-gray-700">Data fim:</span>
                    <input
                      type="date"
                      value={endDate}
                      onChange={(e) => setEndDate(e.target.value)}
                      className="text-sm border border-gray-300 rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  <button
                    onClick={() => {
                      setSearchTerm('')
                      setStatusFilter('todos')
                      setTipoConsultaFilter('todos')
                      setStartDate('')
                      setEndDate('')
                    }}
                    className="text-sm text-blue-600 hover:text-blue-800"
                  >
                    Limpar filtros
                  </button>
                </div>
              )}

              {/* Resumo dos resultados */}
              <div className="text-sm text-gray-600">
                {filteredLeads.length !== leads.length && (
                  <span>Mostrando {filteredLeads.length} de {leads.length} leads</span>
                )}
                {filteredLeads.length === leads.length && (
                  <span>Total: {leads.length} leads</span>
                )}
              </div>
            </div>
          </div>

          {leads.length === 0 ? (
            <div className="text-center py-12 bg-white rounded-lg shadow">
              <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Nenhum lead encontrado</h3>
              <p className="text-gray-600 mb-4">
                Comece criando seus primeiros leads ou importe leads de exemplo.
              </p>
              <button
                onClick={createSampleLeads}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
              >
                <Plus className="h-4 w-4 mr-2" />
                Criar Leads de Exemplo
              </button>
            </div>
          ) : (
            <>
              {viewMode === 'kanban' ? (
                <div className="space-y-6">
                  {renderKanbanView()}
                </div>
              ) : (
                <div className="bg-white rounded-lg shadow overflow-hidden">
                  <div className="px-6 py-4 border-b border-gray-200">
                    <h3 className="text-lg font-medium text-gray-900">
                      Leads ({filteredLeads.length})
                    </h3>
                  </div>
                  <div className="divide-y divide-gray-200 max-h-[600px] overflow-y-auto">
                    {filteredLeads.map((lead) => (
                      <div
                        key={lead.id}
                        className="p-6 cursor-pointer hover:bg-gray-50 transition-colors"
                        onClick={() => {
                          setEditingLead(lead)
                          setShowEditModal(true)
                        }}
                      >
                            <div className="flex items-start justify-between">
                              <div className="flex-1">
                                <div className="flex items-center space-x-2 mb-2">
                                  <h4 className="text-lg font-medium text-gray-900">
                                    {lead.nome_cliente || 'Nome não informado'}
                                  </h4>
                                </div>
                                
                                <div className="space-y-1 text-sm text-gray-600">
                                  {lead.cpf && <div>CPF: {lead.cpf}</div>}
                                  {lead.telefone && (
                                    <div className="flex items-center">
                                      <Phone className="h-4 w-4 mr-1" />
                                      {lead.telefone}
                                    </div>
                                  )}
                                  <div>Origem: {lead.origem || '-'}</div>
                                  {lead.tipo_consulta_interesse && <div>Consulta: {lead.tipo_consulta_interesse}</div>}
                                  {lead.valor_estimado_divida && (
                                    <div className="font-medium text-green-600">
                                      Valor estimado: {formatCurrency(lead.valor_estimado_divida)}
                                    </div>
                                  )}
                                </div>

                                <div className="mt-3 flex items-center justify-between">
                                  <div className="text-xs text-gray-500">
                                    {formatDate(lead.created_at)}
                                  </div>
                                </div>
                              </div>

                              <div className="ml-4">
                                {getStatusBadge(lead.status_generico || lead.status_limpa_nome || 'novo_lead')}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
              )}
            </>
          )}
        </div>
      ) : (
        renderReportsTab()
      )}

      {/* Modal de criar lead */}
      {showCreateForm && (
        <CreateLeadModal
          isOpen={showCreateForm}
          onClose={() => setShowCreateForm(false)}
          onLeadCreated={fetchLeads}
          userId={user?.id}
        />
      )}

      {/* Modal de editar lead */}
      {showEditModal && (
        <EditLeadModal
          isOpen={showEditModal}
          onClose={() => {
            setShowEditModal(false)
            setEditingLead(null)
          }}
          lead={editingLead}
          onLeadUpdated={fetchLeads}
          availableStatuses={getRelevantStatuses()}
          userTipoNegocio={userTipoNegocio}
        />
      )}
    </div>
  )
}